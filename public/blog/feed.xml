<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://lelylan.com/</id>
  <title>Lelylan - reThink your house</title>
  <updated>2012-08-05T22:00:00Z</updated>
  <link rel="alternate" href="http://lelylan.com/"/>
  <link rel="self" href="http://lelylan.com/blog/feed.xml"/>
  <author>
    <name>Lelylan Team</name>
    <uri>http://lelylan.com</uri>
  </author>
  <entry>
    <id>tag:lelylan.com,2012-08-06:/blog/evrythng/</id>
    <title type="html">EVRYTHNG</title>
    <published>2012-08-05T22:00:00Z</published>
    <updated>2012-08-05T22:00:00Z</updated>
    <link rel="alternate" href="http://lelylan.com/blog/evrythng/"/>
    <content type="html">&lt;div class="article"&gt;

  &lt;br/&gt;

  &lt;ul class="media-grid"&gt;
    &lt;li&gt;
    &lt;a href="http://evrythng.net/"&gt;&lt;img class="thumbnail" src="/images/blog/evrythng/header.png" alt="Evrythng"&gt;&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;
  &lt;a href="http://evrythng.net/"&gt;EVRYTHNG&lt;/a&gt; is a platform used to create Active Digital 
  Identities. These are unique online profiles for products and other objects to make them 
  part of the Web. In this way every physical thing can be digitally connected.
  &lt;/p&gt;

  &lt;p&gt;
    For example you could have a bike that tells you where it is placed if it has been moved, 
    a smart meter that turns on your washing machines at the cheapest times or a camera that 
    suggests you where to go to to get the perfect shots. All of this is based around the 
    Active Digital Identity: the idea of having an online profile for every physical object.
  &lt;/p&gt;

  &lt;p&gt;
  EVRYTHNG has a clear target which can be split in three groups.
  &lt;/p&gt;

  &lt;ol&gt;
    &lt;li&gt;
    &lt;b&gt;Marketers&lt;/b&gt; to create digital experiences and new services built around the 
    relationship between a customer and their product, improving the product experience.
    &lt;/li&gt;
    &lt;li&gt;
    &lt;b&gt;Manufacturers&lt;/b&gt; to create products with personalized digital experiences already 
    embedded and build applications and services that store data and real-time updates 
    from the physical objects.
    &lt;/li&gt;
    &lt;li&gt;
    &lt;b&gt;Developers&lt;/b&gt; to create applications that stores and uses real-time information 
    related to the physical objects and to design new way to interact with them.
    &lt;/li&gt;
  &lt;/ol&gt;

  &lt;p&gt;
  You can start using EVRYTHNG today for free managing up to 1000 Active Digital Identities
  (which are more than enough for different scenarios) and 100MB of storage. Other plans are 
  not available right now and if you have bigger needs, you need to get in touch with the team. 
  &lt;/p&gt;

  &lt;p&gt;
  They have a good communication. You can follow them on &lt;a href="https://twitter.com/connectevrythng"&gt;
  twitter&lt;/a&gt; or on their &lt;a href="http://www.webofthings.org/"&gt;blog&lt;/a&gt;, which as far as I 
  can remember it is one of the first who started to talk about the Internet of things four 
  years ago. Quite impressive in our opinion.
  &lt;/p&gt;


  &lt;h2&gt;EVRYTHNG API&lt;/h2&gt;

  &lt;p&gt;
  To make all of this real, EVRYTHNG has created a platform to easily create third party 
  applications and analytics around Active Digital Identities (from now on ADIs), all of 
  this through a RESTful API and a secure software infrastructure that let you easily 
  connect your objects to the web.
  &lt;/p&gt;

  &lt;p&gt;
  Going more in details the infrastructure provides services for accessing, creating, 
  storing, manipulating, sharing, or searching the ADIs for millions of real-world objects, 
  and also a set of services and tools that can be useful for such applications. 
  &lt;/p&gt;

  &lt;p&gt;
  EVRYTHNG is currently in closed Beta and is available only to a limited group of commercial 
  and academic partners. Anyway, I'm sure that signing up proposing ideas you want to develop 
  will give you an early access. The main concepts are easy to get and the documentation let 
  you understand the service step by step. Here an introduction.
  &lt;/p&gt;

  &lt;blockquote&gt;
    &lt;p&gt;
    &lt;code&gt;Thngs&lt;/code&gt; (it is not misspelled, they call it in this way) have various 
    &lt;code&gt;Properties&lt;/code&gt; and can be organized into &lt;code&gt;Collections&lt;/code&gt;, and 
    operated on by &lt;code&gt;Users&lt;/code&gt; and &lt;code&gt;Groups&lt;/code&gt;. Access control schemes 
    can be used to decide who can interact with what resource and how. This is all you 
    need to know to have a basic idea. Lets dig in deep.
    &lt;/p&gt;
  &lt;/blockquote&gt;

  &lt;p&gt;
  It accept JSON-P callbacks by adding a &lt;code&gt;?callback&lt;/code&gt; parameter to any GET call
  so that you can have the results wrapped in a JSON function and they limit requests to API
  to 5000 per day.
  &lt;/p&gt;

  &lt;p&gt;
  The services are not complex and they are well described in the web site, so here we just 
  sum them up.
  &lt;/p&gt;

  &lt;h3&gt;&lt;a href="http://dev.evrythng.net/#thngs"&gt;THNGS&lt;/a&gt;&lt;/h3&gt;
  
  &lt;p&gt;
  An abstract notion of an object which has location and property data associated to it. Also 
  called Active Digital Identities (ADIs), these resources can model real-world elements such 
  as persons, places, cars, guitars, mobile phones, etc. 
  &lt;/p&gt;

  &lt;p&gt;
  You can set different params like a name, longitude, latitude which can be used to identify 
  the thng, but also to enable search queries later on. Nice the ability to create many things 
  at once which returns a list of IDs for the newly created resources.
  &lt;/p&gt;

  &lt;p&gt;
  Sample &lt;code&gt;thng&lt;/code&gt; representation.
  &lt;/p&gt;

&lt;pre&gt;
{
"id": "44ed3d1ad0b1cdc02490081ca",
"name": "Television",
"description": "Sony Smart Television",
"is_public": false,
"latitude": "43.772828",
"longitude": "11.249488",
"created_at": "2011-04-18T23:23:56Z"
}&lt;/pre&gt;

  &lt;h3&gt;&lt;a href="http://dev.evrythng.net/#properties"&gt;PROPERTIES&lt;/a&gt;&lt;/h3&gt;

  &lt;p&gt;
  A Thng can have properties which are arbitrary key/value pairs to store any data. Values could 
  be either text or binary.
  &lt;/p&gt;

  &lt;p&gt;
  Sample &lt;code&gt;property&lt;/code&gt; representation.
  &lt;/p&gt;

&lt;pre&gt;
{
"key": "Volume",
"value": "20"
"created_at": "2011-04-18T12:10:56Z"
}&lt;/pre&gt;


  &lt;h3&gt;&lt;a href="http://dev.evrythng.net/#collections"&gt;COLLECTIONS&lt;/a&gt;&lt;/h3&gt;

  &lt;p&gt;
  A collection is a group of Thngs. Collections can be created by various users, and the same 
  Thng can be in more than one collection.
  &lt;/p&gt;

  &lt;p&gt;
  Sample &lt;code&gt;collection&lt;/code&gt; representation.
  &lt;/p&gt;

&lt;pre&gt;
{
"id": "44ed3d1ad0b1cdc02490081de",
"name": "Electronics",
"description": "Contains all electronics in my house",
"is_public": true,
"created_at": "2012-07-18T23:23:56Z"
}&lt;/pre&gt;

  &lt;h3&gt;Other stuff&lt;/h3&gt;

  &lt;p&gt;
  There is also a &lt;a href="http://dev.evrythng.net/#search"&gt;search&lt;/a&gt; service which does 
  what it says. You can also find some wrappers to easily start building clients in 
  &lt;a href="https://github.com/evrythng/evrythng-java-wrapper"&gt;Java&lt;/a&gt; and 
  &lt;a href="https://github.com/evrythng/evrythng-ruby-wrapper"&gt;Ruby&lt;/a&gt;.
  &lt;/p&gt;


  &lt;h2&gt;Conclusions&lt;/h2&gt;

  &lt;p&gt;
  When you get to read the website you get a nice feeling. Everything is placed in the right 
  place, the design is very nice and the main concepts are easy to grasp.
  &lt;/p&gt;

  &lt;p&gt;
  Overall EVRYTHNG is a simple product if compared with solutions like 
  &lt;a href="http://lelylan.com/blog/cosm/"&gt;COSM&lt;/a&gt;, but its simplicity is 
  also its strength. We really enjoyed walking through the whole documentation 
  and we had the feeling we could have started to use them right now. We loved this.
  &lt;/p&gt;

  &lt;p&gt;
  In the other side, the APIs don't let you do that much and this limits the developer 
  ability to build new services. Concepts like oauth2 or physical devices provisioning
  are not faced and in our opinion are too important to be left apart. Once they will be
  integrated (or publicly released) they will be ready for the real Internet of Things market.
  &lt;/p&gt;

&lt;/div&gt;</content>
  </entry>
  <entry>
    <id>tag:lelylan.com,2012-07-26:/blog/thingspeak/</id>
    <title type="html">ThingSpeak</title>
    <published>2012-07-25T22:00:00Z</published>
    <updated>2012-07-25T22:00:00Z</updated>
    <link rel="alternate" href="http://lelylan.com/blog/thingspeak/"/>
    <content type="html">&lt;div class="article"&gt;

  &lt;br/&gt;

  &lt;ul class="media-grid"&gt;
    &lt;li&gt;
    &lt;a href="https://www.thingspeak.com/"&gt;&lt;img class="thumbnail" src="/images/blog/thingspeak/header.png" alt="ThingSpeak"&gt;&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;
  &lt;a href="https://www.thingspeak.com/"&gt;ThingSpeak&lt;/a&gt; is an open platform designed to enable
  connections between things and people. Reading through their blog you can find different
  examples and, I've to admit, some made me smile. The best is for sure the
  &lt;a href="http://community.thingspeak.com/2012/06/a-twitter-powered-gumball-machine-built-on-thingspeak-arduino/"&gt;gum-ball machine&lt;/a&gt;
  that being able to communicate with Twitter gets you a tasty gum-ball whenever you send a 
  tweet to its account. I guess this could be a killer application for kids.
  &lt;/p&gt;

  &lt;p&gt;
  &lt;strong&gt;ThingSpeak API is open source&lt;/strong&gt; and available on 
  &lt;a href="https://github.com/iobridge/thingspeak"&gt;github&lt;/a&gt;. This makes it different from 
  any other service out there at least for two reasons. The first one is that you can run 
  ThingSpeak on a private network, on your own servers. The second one is that you can take 
  the source code and make changes, contributing with new features. Since it has been 
  released in March 2011, it has been installed on over 500 servers. Nice numbers.
  &lt;/p&gt;

  &lt;p&gt;
  ThingSpeak is a Ruby on Rails 3.0 application and it includes everything to get 
  started: user management, API key management, channel management and charting. 
  The license for ThingSpeak is under GPLv3 for open source use and can be licensed 
  from &lt;a href="http://www.iobridge.com/"&gt;ioBridge&lt;/a&gt; for closed source applications.
  &lt;/p&gt;

  &lt;h2&gt;What can I do?&lt;/h2&gt;

  &lt;p&gt;
  Think at ThingSpeak as a data container accessible via simple HTTP requests. Data can 
  come from anything. Blood sugar levels measured by a glucose meter, server uptime or 
  location info from a mobile phone. All of this data is stored in a &lt;code&gt;channel&lt;/code&gt;.
  &lt;/p&gt;

  &lt;p&gt;
  When you need to visualize your data, ThingSpeak has dynamic &lt;code&gt;charts&lt;/code&gt; and an API 
  to customize them. The charts are used to display sensor data over time and they work on all 
  devices by using JavaScript. The chart types supported are Line, Bar, Column, and Step and you
  can set colors, sizing, and labels to fit your needs.
  &lt;/p&gt;

  &lt;ul class="media-grid"&gt;
    &lt;li&gt;
    &lt;a href="https://www.thingspeak.com/"&gt;&lt;img class="thumbnail" src="/images/blog/thingspeak/graph.png" alt="ThingSpeak"&gt;&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;h2&gt;Applications approach&lt;/h2&gt;

  &lt;p&gt;
  ThingSpeak offers several &lt;code&gt;applications&lt;/code&gt; to let channels communicate with 
  other services and augment ThingSpeak capabilities. Right now we can find four of them.
  &lt;/p&gt;

  &lt;h3&gt;&lt;a href="https://www.thingspeak.com/apps/thingtweets"&gt;ThingTweet&lt;/a&gt;&lt;/h3&gt;

  &lt;p&gt;
  ThingTweet let you easily send status updates to Twitter along with storing your data in a 
  ThingSpeak Channel at the same. For example you can have your garage door twitting "You left 
  the door open" or your house saying "Today's power use was 6150 watts".
  &lt;/p&gt;

  &lt;pre&gt;
POST /apps/thingtweet/1/statuses/update
Host: api.thingspeak.com

api_key={thingtweet_key}&amp;status=Your+dear+tulip+is+getting+thirsty.&lt;/pre&gt;
  

  &lt;h3&gt;&lt;a href="https://www.thingspeak.com/apps/thinghttp"&gt;ThingHTTP&lt;/a&gt;&lt;/h3&gt;

  &lt;p&gt;
  ThingHTTP allows a micrcontroller to connect to any web service using HTTP. It lets you
  create a resource on the web and then control it using a simple API. It supports GET, 
  POST, PUT, and DELETE methods, SSL, Basic Authentication and more.
  &lt;p&gt;

  &lt;p&gt;
  Lets make an example with &lt;a href="https://www.twilio.com/"&gt;Twilio&lt;/a&gt;. Twilio is a cloud 
  communication platform for phone calls and SMS messages. You can access to its functionalities
  through its API, but it requires HTTPS and Basic Authentication which is perfect for 
  high-level devices like phones, but nearly impossible for an embedded device like Arduino.
  As ThingHTTP allows a device to make HTTPS calls to any service it easily let you interface 
  the Twilio API with your device.
  &lt;/p&gt;

  &lt;p&gt;
  Sample request.
  &lt;/p&gt;

  &lt;pre&gt;
POST /apps/thinghttp/send_request
Host: api.thingspeak.com

api_key={thinghttp_key}&amp;message=I+call+you+because+the+water+is+finished&lt;/pre&gt;

  &lt;h3&gt;&lt;a href="https://www.thingspeak.com/apps/reacts"&gt;Reacts&lt;/a&gt;&lt;/h3&gt;

  &lt;p&gt;
  React allows you to trigger a request when your channel meets a certain condition. For
  example, you can have your thermostat turn on by the time you get home from work or you
  can post a Twitter update when your power use is higher than normal.
  &lt;/p&gt;

  &lt;p&gt;
  React let you check if a field:
  &lt;/p&gt;

  &lt;ol&gt;
    &lt;li&gt;&lt;code&gt;contains&lt;/code&gt;, &lt;code&gt;starts with&lt;/code&gt;, &lt;code&gt;ends with&lt;/code&gt;,
    &lt;code&gt;is equal to&lt;/code&gt; or &lt;code&gt;is not equal to&lt;/code&gt; a string.
    &lt;/li&gt;
    &lt;li&gt;&lt;code&gt;is greater than&lt;/code&gt;, &lt;code&gt;is less than&lt;/code&gt; or &lt;code&gt;is equal
      to&lt;/code&gt; a number. 
    &lt;/li&gt;
    &lt;li&gt;
    &lt;code&gt;is farther than&lt;/code&gt; or &lt;code&gt;is within&lt;/code&gt; a geo location.
    &lt;/li&gt;
  &lt;/ol&gt;

  &lt;p&gt;
  You can test your condition on every insert or on a periodic basis and differently
  by the other services you do not have an API to create a reaction. You can do it only
  through the ThingSpeak web interface.
  &lt;/p&gt;

  &lt;h3&gt;&lt;a href="https://www.thingspeak.com/apps/tweetcontrol"&gt;Tweetcontrol&lt;/a&gt;&lt;/h3&gt;

  &lt;p&gt;
  TweetControl allows you to receive notifications from your Twitter account when using
  a specific &lt;code&gt;#hashtag&lt;/code&gt;. It uses the Twitter Streaming API, triggering changes
  to your channels in real-time.
  &lt;/p&gt;

  &lt;p&gt;
  The flow is straight forward. You create a new TweetControl, fill the twitter screen
  name to tied it to a twitter user, enter a hashtag to listen for (e.g. &lt;code&gt;#openlight&lt;/code&gt;)
  and select a ThingHTTP request to execute. Also in this case there is not an API.
  &lt;/p&gt;

  &lt;h2&gt;Conclusions&lt;/h2&gt;

  &lt;p&gt;
  As you can see in this article we didn't describe the 
  &lt;a href="http://community.thingspeak.com/documentation/api/"&gt;ThingSpeak API&lt;/a&gt;. 
  We didn't do that for two reasons: the first is that the creation of &lt;code&gt;channels
  &lt;/code&gt; and &lt;code&gt;charts&lt;/code&gt; is straightforward; the second is that the real 
  power of ThingSpeak does not lies in its API, but on its applications.
  &lt;/p&gt;

  &lt;p&gt;
  Applications are a key element to build a successful Internet of Things. Only when it will
  interacts with all services out there we will be able to see its real power. In this 
  ThingSpeak is good example of how things should be done. We saw some applications in 
  action and we are looking forward for new ones to come.
  &lt;/p&gt;

  &lt;p&gt;
  We also liked the presence of tutorials explaining how to connect ThingSpeak with the 
  real world. We can find examples about 
  &lt;a href="http://community.thingspeak.com/tutorials/wireless/connecting-xbee-wireless-networks-to-thingspeak-via-the-connectport-x2-running-xig/"&gt;connecting XBee wireless networks&lt;/a&gt;,
  &lt;a href="http://www.frank-zhao.com/thingspeak_mbed_tut1/"&gt;temperature monitoring using mbed&lt;/a&gt;, 
  &lt;a href="http://community.thingspeak.com/tutorials/netduino/create-your-own-web-of-things-using-the-netduino-plus-and-thingspeak/"&gt;Netduino integration&lt;/a&gt; and of course about
  &lt;a href="http://community.thingspeak.com/tutorials/arduino/using-an-arduino-ethernet-shield-to-update-a-thingspeak-channel/"&gt;Arduino&lt;/a&gt;.
  Those kind of tutorial are never enough.

  &lt;/p&gt;

  &lt;p&gt;
  Just two notes before closing the article. First, if compared with
  &lt;a href="http://lelylan.com/blog/cosm/"&gt;Cosm&lt;/a&gt; or
  &lt;a href="http://lelylan.com/blog/evrythng/"&gt;EVRYTHNG&lt;/a&gt;
  the documentation can be surely improved. The feeling is that the site has all 
  docs, tutorials and examples we need to build great stuff, but it could be better
  organized to attract new developers. Second, they are missing some core concepts 
  like oauth2 or devices provisioning which are a must in a service that wants to 
  get into the Internet of Things market.
  &lt;/p&gt;

&lt;/div&gt;</content>
  </entry>
  <entry>
    <id>tag:lelylan.com,2012-07-24:/blog/cosm/</id>
    <title type="html">Cosm (aka Pachube)</title>
    <published>2012-07-23T22:00:00Z</published>
    <updated>2012-07-23T22:00:00Z</updated>
    <link rel="alternate" href="http://lelylan.com/blog/cosm/"/>
    <content type="html">&lt;div class="article"&gt;

  &lt;br/&gt;

  &lt;ul class="media-grid"&gt;
    &lt;li&gt;
    &lt;a href="http://cosm.com"&gt;&lt;img class="thumbnail" src="/images/blog/cosm/header.png" alt="Cosm"&gt;&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;
  COSM is a platform which enables you to store, share and discover real-time sensor, 
  energy and environment data from devices and sensors. Cosm provides most of its 
  functionality through its API, rather than through its web site, giving to developers
  a full set of services that we will be describing in this article.
  &lt;/p&gt;

  &lt;h2&gt;Once upon a time there was Pachube&lt;/h2&gt;

  &lt;p&gt;
  When it started, around 4 years ago, its name was Pachube. It was ideally suited 
  for visualizing data from sensors connected to the physical world. The main concepts 
  on which Pachube came to life was two: feeds and datastreams.
  &lt;/p&gt;

  &lt;ul class="unstyled"&gt;
    &lt;li&gt;&lt;code&gt;Feeds&lt;/code&gt; Usually a location (e.g. office and house).&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;Datastreams&lt;/code&gt; The physical device associated to the location
    (e.g. sensors and power meters).&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;
  A few months ago, it had a facelift and it changed its name to Cosm. Cosm is everything 
  you know and love about Pachube, with more power to connect and build the Internet of 
  Things today. The data about Cosm is quite impressive. It manages millions of datapoints 
  per day from thousands of individuals, organisations and companies around the world. Data 
  can be pushed from the sensor end, or pulled by the Cosm servers, with the data feeds 
  then made available in multiple formats at no charge.
  &lt;/p&gt;

  &lt;p&gt;
  In its new vest Cosm tries to be a social network for the Internet of Things, but as
  reported by &lt;a href="http://www.readwriteweb.com/archives/cosm-disappointing-re-design-by-internet-of-things-pioneer-pachube.php"&gt;Read Write Web&lt;/a&gt;,
  at least two problems raised. The first one is that Cosm tries to be now mainstream, it
  tries to be "for everybody", but it is not ready for this step. Its UI is not enough
  intuitive. Second, when you go into the console you can't do that much, at least if 
  you do not have an Arduino. After a while you just leave it. This is an extract I really 
  like of the RWW article.
  &lt;/p&gt;

  &lt;blockquote&gt;
    &lt;p&gt;
    I'm being a little hard on Cosm, because I was expecting something more user friendly. However, 
    I still buy into the vision for Cosm. In a close future, we will indeed manage various 
    feeds from household and other devices...
    &lt;/p&gt;
  &lt;/blockquote&gt;

  &lt;p&gt;
  After studying their APIs we think Cosm is a great product. It has almost all
  the services needed to build the Internet of Things and when hardware producers will
  realize that, it will start making big numbers. Enough with the introduction, it's API time.
  &lt;/p&gt;

  &lt;h2&gt;Cosm APIs&lt;/h2&gt;

  &lt;p&gt;
  The &lt;a href="https://cosm.com/docs/quickstart"&gt;API documentation&lt;/a&gt; is complete. There is 
  quickstart which lets you create your first feed following a step by step wizard. Although it
  is clear and well prepared, we didn't like the idea of importing the Twitter feed in Cosm as
  first example as it's not a use case for the Internet of Things. This said lets dig into the 
  services.
  &lt;/p&gt;

  &lt;h3&gt;&lt;a href="https://cosm.com/docs/v2/feed/"&gt;FEEDS&lt;/a&gt;&lt;/h3&gt;

  &lt;p&gt;
  It represents a group of datastreams. It is used to represent some locations like your 
  house or your office. It's interesting the ability to tag the feeds to make them easily 
  searchable and also the ability to set latitude and longitude to enable geospatial queries.
  &lt;p&gt;

  &lt;h3&gt;&lt;a href="https://cosm.com/docs/v2/datastream/"&gt;DATASTREAMS&lt;/a&gt;&lt;/h3&gt;

  &lt;p&gt;
  A datastream represents an individual sensor/device stream within an environment like
  powermeters, lights or geiger counters. In here the values related to the physical 
  device properties are stored.
  &lt;/p&gt;

  &lt;h3&gt;&lt;a href="https://cosm.com/docs/v2/datapoint/"&gt;DATAPOINTS&lt;/a&gt;&lt;/h3&gt;

  &lt;p&gt;
  A datapoint represents the value in a specific moment of the datastream life. This 
  enables you to insert datapoints into the history of the datastream.
  &lt;/p&gt;

  &lt;h3&gt;&lt;a href="https://cosm.com/docs/v2/api_key/"&gt;API KEYS&lt;/a&gt;&lt;/h3&gt;

  &lt;p&gt;
  Cosm lets you create API keys with granular permissions. Keys are composed of different 
  sets of permissions, so for example we could create a key that allows read-only access to
  all public resources or allows write-access to one specific feed, from one specific IP 
  address. Those are the most important properties in the key resource.
  &lt;/p&gt;

  &lt;ul class="unstyled"&gt;
    &lt;li&gt;&lt;code&gt;expires_at&lt;/code&gt; Gives a temporary limit.&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;private_access&lt;/code&gt; Flag if this key can access private resources.&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;permissions&lt;/code&gt; List of access level.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;
  The permission structure is another resource and those are the most interesting 
  properties you should be aware of.
  &lt;/p&gt;

  &lt;ul class="unstyled"&gt;
    &lt;li&gt;&lt;code&gt;access_method&lt;/code&gt; An array containing one or more of [get, put, post, delete].&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;source_ip&lt;/code&gt; An IP address that access should be restricted to,
    &lt;li&gt;&lt;code&gt;minimum_interval&lt;/code&gt; Can be used to create a key that can only request data 
    with a certain resolution.&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;resources&lt;/code&gt; An optional collection of resources restricting access 
    to specific feeds or datastreams.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3&gt;&lt;a href="https://cosm.com/docs/v2/trigger/"&gt;TRIGGERS&lt;/a&gt;&lt;/h3&gt;

  &lt;p&gt;
  Triggers fire HTTP POST requests to a URL of your choice when conditions that you 
  set up on a datastream have been satisfied (e.g. value change, value exceeds threshold, 
  value equals, etc.).
  &lt;/p&gt;

  &lt;p&gt;
  This service can be useful in different scenarios. For example to turn off the cooling 
  system when a window is open or when the water for your flowers is finished. In this way,
  using a webhook mechanism you can connect Cosm feeds and datastreams with any other app.
  &lt;/p&gt;

  &lt;h3&gt;&lt;a href="https://cosm.com/docs/v2/user/"&gt;USERS&lt;/a&gt;&lt;/h3&gt;

  &lt;p&gt;
  User are ideally a powerful concept, as there are some situations where you have
  to create new people, so that you can let them access your resources for a limited 
  period of time. Unluckily the resource is not open and you have to make a request to 
  Cosm if you want to use it.
  &lt;/p&gt;

  &lt;h3&gt;&lt;a href="https://cosm.com/docs/v2/history.html"&gt;HISTORICAL QUERY&lt;/a&gt;&lt;/h3&gt;

  &lt;p&gt;
  Gives the ability to make queries for ranges of historical data at datastream level
  as well as at the environment level, using formatted dates. The API lets you set the
  param &lt;code&gt;interval&lt;/code&gt;, which can be pretty useful to reduce the amount of retrieved
  data letting you get back the historical resources with intervals of 30 seconds, one minute,
  5 minutes and so on.
  &lt;/p&gt;


  &lt;h2&gt;Beta features&lt;/h2&gt;

  &lt;p&gt;
  Cosm is delivering also different &lt;a href="https://cosm.com/docs/beta/"&gt;beta&lt;/a&gt; features, 
  which are just delicious.
  &lt;/p&gt;

  &lt;h3&gt;&lt;a href="https://cosm.com/docs/beta/group/"&gt;GROUPS&lt;/a&gt;&lt;/h3&gt;

  &lt;p&gt;
  Groups can be used for two main reasons: organize both users and feeds, and create 
  more advanced access rules for private feeds. If used in the right way, they can make your 
  system much more flexible and open to other users.
  &lt;/p&gt;

  &lt;h3&gt;&lt;a href="https://cosm.com/docs/beta/permission/"&gt;PERMISSIONS&lt;/a&gt;&lt;/h3&gt;

  &lt;p&gt;
  The permissions API allows you to get information about what an API Key is allowed to 
  do.
  &lt;p&gt;

  &lt;h3&gt;&lt;a href="https://cosm.com/docs/beta/socket_server/"&gt;SOCKET SERVER&lt;/a&gt;&lt;/h3&gt;

  &lt;p&gt;
  Paws is the Cosm Advanced Web-scale Socket-server. It is designed to make writing 
  clients which require real-time push notifications as easy as possible.
  &lt;/p&gt;

  &lt;h3&gt;&lt;a href="https://cosm.com/docs/beta/mqtt/"&gt;MQTT&lt;/a&gt;&lt;/h3&gt;

  &lt;p&gt;
  The Cosm MQTT Bridge is a simple way to interact with Cosm directly from any MQTT
  enabled platform. It provides full API interaction, as well as push notifications
  and subscriptions.
  &lt;/p&gt;

  &lt;h3&gt;&lt;a href="https://cosm.com/docs/beta/oauth/"&gt;OAUTH2&lt;/a&gt;&lt;/h3&gt;

  &lt;p&gt;
  OAuth2 is a method for allowing third-party application access to your resources 
  without giving them access to your username and password. It is used by most major 
  websites including Facebook and Twitter and its biggest strength lies in its ability 
  to let the user have full control of its resources.
  &lt;/p&gt;

  &lt;h2&gt;Provisioning beta. A delicious service&lt;/h2&gt;

  &lt;p&gt;
  The &lt;a href="https://cosm.com/docs/beta/device_management/provisioning/"&gt;provisioning&lt;/a&gt; 
  service is just awesome. Provisioning is the process of a device getting its configuration 
  in order to be able to send data to Cosm. This service simplify our lives when thinking 
  at the physical world allowing the owner of the device to 'claim' it. For example once 
  your device is plugged in and online, you might go to its website, enter your serial 
  number and claim it there, and this would all be done using the provisioning APIs.
  &lt;/p&gt;

  &lt;p&gt;
  When the physical device is plugged in this is what happens.
  &lt;/p&gt;

  &lt;ol&gt;
    &lt;li&gt;It sends an activation code to the provisioning API.&lt;/li&gt;
    &lt;li&gt;The API creates a feed (which can be preconfigured).&lt;/li&gt;
    &lt;li&gt;The API creates an API key that is sent to the device. This key will be used by 
    the physical device to authenticate itself when sending updates.&lt;/li&gt;
  &lt;/ol&gt;

  &lt;p&gt;
  Without getting into the details Cosm let you define two resources. The first one is the 
  &lt;a href="https://cosm.com/docs/beta/device_management/api/device_model/"&gt;Device Model&lt;/a&gt; 
  and it represents a class of devices, like the "Boxee" and the second is 
  &lt;a href="https://cosm.com/docs/beta/device_management/api/device/"&gt;Device&lt;/a&gt;, 
  which represents an individual device with its own serial number.
  &lt;/p&gt;

  &lt;p&gt;
  Without going further, go and read the &lt;a href="https://cosm.com/docs/beta/device_management/provisioning/"&gt;documentation&lt;/a&gt;.
  It will be worth it.
  &lt;/p&gt;

  &lt;h2&gt;Conclusions&lt;/h2&gt;

  &lt;p&gt;
  Cosm is for sure the most complete service out there. It offers all the services we need to 
  build the Internet of Things, and it does it well. At first all of those concepts are not easy
  to grasp, but give it the right time and you will get excited about what you can do. It's a 
  metter of time and its success will start to be visible to everyone.
  &lt;/p&gt;

  &lt;p&gt;
  Tell us which one is the next Internet of Things startup you want us to check. This is the 
  first article of a series that wants to get in deep about the Internet of Things ecosystem.
  &lt;/p&gt;

&lt;/div&gt;</content>
  </entry>
  <entry>
    <id>tag:lelylan.com,2012-07-23:/blog/access/</id>
    <title type="html">Houses for the Web</title>
    <published>2012-07-22T22:00:00Z</published>
    <updated>2012-07-22T22:00:00Z</updated>
    <link rel="alternate" href="http://lelylan.com/blog/access/"/>
    <content type="html">&lt;div class="article"&gt;

  &lt;ul class="media-grid"&gt;
    &lt;li&gt;
    &lt;img class="thumbnail header" src="/images/blog/access/header.png" alt="Building your house hub"&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;
  When you build a home automation system you need to face different issues like
  security, availability, connectivity and interoperability between the others. In the 
  &lt;a href="/blog/electronics/"&gt;previous article&lt;/a&gt; we pointed out how great it is to 
  experiment with and hack devices with cheap solutions like Arduino, but those solutions 
  are not (yet) powerful enough to feature all we need for the connected house. What if 
  we want to add  SSL, off-line control, protocols interoperation? Actually there we 
  have two possible solutions:
  &lt;strong&gt;single device intelligence&lt;/strong&gt; and
  &lt;strong&gt;home automation hubs.&lt;/strong&gt;
  &lt;/p&gt;

  &lt;h2&gt;Single Device Intelligence&lt;/h2&gt;

  &lt;p&gt;
  This is the best solution and it totally changes the way we think at home automation 
  today. Every device comes out with the ability to connect to the web in a secure way.
  The scenario is the one where you go to Ikea or the shop down to your house, buy a
  light, go home, connect it to the web and tell Lelylan it's part of your house.
  &lt;/p&gt;

  &lt;p&gt;
  This sounds great right. Yes, it does but it has a couple of drawbacks. The first one is 
  that every device must be equipped with the ability to directly connect to the web (or to 
  the router in your house) providing all security features (SSL and authorization logics).
  This is possible and today we already have the technologies to do this, but it would make 
  any device way more expensive. 
  &lt;/p&gt;

  &lt;p&gt;
  Think at a light. Today you pay it $10. What if it suddenly costs you more than $70 just to 
  be connected to the web? No way, at least if we think that home automation is for everybody.
  The good point is that techs are getting cheaper and more powerful day by day and this 
  will let us build smart devices for few more dollars more really soon. Check out 
  &lt;a href="http://electricimp.com"&gt;Electronic Imp&lt;/a&gt; if you want to see what the future will
  look like.
  &lt;/p&gt;

  &lt;h2&gt;Home Automation Hub&lt;/h2&gt;

  &lt;p&gt;
  This is the real solution nowadays. Think at the home automation ecosystem today. We have
  a lot of companies producing any kind of device using different standards. In this way we 
  depend on them and we can't unleash the real power of a home automation system because
  we can't let every device communicate.
  &lt;/p&gt;

  &lt;p&gt;
  To solve this problem we need a hub, which is a small computer that will let your house 
  talk to the web, without caring at all about the technology the devices use. In this way you 
  can connect devices that use Zigbee, Konnex, X10 and whatever exists out there and let them be
  accessible to the web. It's not easy, as you need to have a great knowledge of how those 
  protocols work out, but once you do this they are accessible.
  &lt;/p&gt;

  &lt;p&gt;
  A home automation hub gives you several advantages. You have only one place to handle
  secure communication and authorization, you can install some extra applications, you can 
  easily handle an off-line situation when internet does not work and much more. 
  &lt;/p&gt;

  &lt;h2&gt;Conclusions&lt;/h2&gt;

  &lt;p&gt;
  We truly think that making every single device smart is the final goal, but in the meantime 
  we need to face reality and mix these two ideaa which can easily live together.
  &lt;/p&gt;

  &lt;p&gt;
  For the braves who wanna start to experiment their first hub, we've listed the 
  &lt;a href="/blog/boards/"&gt;best boards&lt;/a&gt; existing out there so that you can start hacking 
  your house right now. Just buy one of them and &lt;a href="/about/"&gt;tell us&lt;/a&gt; what you have 
  done.
  &lt;/p&gt;

&lt;/div&gt;</content>
  </entry>
  <entry>
    <id>tag:lelylan.com,2012-07-16:/blog/boards/</id>
    <title type="html">Get into the House</title>
    <published>2012-07-15T22:00:00Z</published>
    <updated>2012-07-15T22:00:00Z</updated>
    <link rel="alternate" href="http://lelylan.com/blog/boards/"/>
    <content type="html">&lt;div class="article"&gt;

  &lt;ul class="media-grid"&gt;
    &lt;li&gt;
      &lt;img class="thumbnail header" src="/images/blog/boards/header.png" alt="Building your house hub"&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
  
  &lt;p&gt;
    Have you ever wished to make your house accessible from the web? 
    In the &lt;a href="/blog/electronics/"&gt;previous article&lt;/a&gt; we pointed out the existing 
    solutions to hack a device with boards like Arduino or Nanode. Anyway those solutions 
    are not (yet) powerful enough to build a secure home automation hub.
  &lt;/p&gt;

  &lt;p&gt;
    &lt;!--We wrote an &lt;a href="/blog/access/"&gt;article talking about this&lt;/a&gt;.--&gt;
    Now it's time to find out more powerful solutions to build an home automation hub which 
    let all of your devices communicate with the web.
  &lt;/p&gt;

  &lt;h3&gt;&lt;a href="http://www.raspberrypi.org/"&gt;Raspberry PI&lt;/a&gt;&lt;/h3&gt;

  &lt;p&gt;
    This is probably the best solution out there. It's a real computer where you can run 
    Debian Linux at only $25. The initiative, started at Cambridge University got lot of 
    attention from all media around the world and in 4 months they were able to sell over
    500.000 pieces.
  &lt;/p&gt;

  &lt;table class="zebra-striped"&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td class="parameter"&gt;
          &lt;span&gt;Price&lt;/span&gt;
        &lt;/td&gt;
        &lt;td&gt;
          Raspberry PI | $25 &lt;br/&gt;
          Raspberry Model B | $35 &lt;br/&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td class="parameter"&gt;
          &lt;span&gt;OS&lt;/span&gt;
        &lt;/td&gt;
        &lt;td&gt;
          Debian Linux. &lt;a href="http://www.raspberrypi.org/downloads"&gt;See other distributions&lt;/a&gt;.
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td class="parameter"&gt;
          &lt;span&gt;Connectivity&lt;/span&gt;
        &lt;/td&gt;
        &lt;td&gt;
          The base version does not offer connectivity.&lt;br/&gt;
          Raspberry Model B&lt;/a&gt; gives you an Ethernet access.
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td class="parameter"&gt;
          &lt;span&gt;Pros&lt;/span&gt;
        &lt;/td&gt;
        &lt;td&gt;
          Low price, community, documentation, open-source.
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td class="parameter"&gt;
          &lt;span&gt;Cons&lt;/span&gt;
        &lt;/td&gt;
        &lt;td&gt;
          Computational power, wireless connectivity.
        &lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;

  &lt;h3&gt;&lt;a href="http://www.rikomagic.co.uk/"&gt;Rikomagic MK802&lt;/a&gt;&lt;/h3&gt;

  &lt;p&gt;
    A fully functional computer no bigger than a USB pen drive, the Rikomagic MK802 runs on 
    the popular Android 4 operating system and it features Wifi. The design is just cool and 
    you have a fully functional computer no bigger than a USB pen drive.
  &lt;/p&gt;

  &lt;table class="zebra-striped"&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td class="parameter"&gt;
          &lt;span&gt;Price&lt;/span&gt;
        &lt;/td&gt;
        &lt;td&gt;
          MK802 | $74
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td class="parameter"&gt;
          &lt;span&gt;OS&lt;/span&gt;
        &lt;/td&gt;
        &lt;td&gt;
          Android 4.
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td class="parameter"&gt;
          &lt;span&gt;Connectivity&lt;/span&gt;
        &lt;/td&gt;
        &lt;td&gt;
          Wifi 802.11b/g/n.
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td class="parameter"&gt;
          &lt;span&gt;Pros&lt;/span&gt;
        &lt;/td&gt;
        &lt;td&gt;
          Low price, wireless connectivity, design.
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td class="parameter"&gt;
          &lt;span&gt;Cons&lt;/span&gt;
        &lt;/td&gt;
        &lt;td&gt;
          Missing community, documentation, computational power.
        &lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;

  &lt;h3&gt;&lt;a href="http://liliputing.com/2012/03/mele-a1000-is-a-70-hackable-linux-friendly-arm-based-pc.html"&gt;Mele A1000&lt;/a&gt;&lt;/h3&gt;

  &lt;p&gt;
    Available for as little as $70, while that's twice the price of a Raspberry Pi computer, 
    the Mele A1000 includes a faster processor, more RAM and a case. It can be a better choice
    if the power given by the Raspberry PI is not enough and you need something aesthetically 
    nice.
  &lt;/p&gt;

  &lt;table class="zebra-striped"&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td class="parameter"&gt;
          &lt;span&gt;Price&lt;/span&gt;
        &lt;/td&gt;
        &lt;td&gt;
          Mele A1000 | $70
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td class="parameter"&gt;
          &lt;span&gt;OS&lt;/span&gt;
        &lt;/td&gt;
        &lt;td&gt;
          Android and Ubuntu.
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td class="parameter"&gt;
          &lt;span&gt;Connectivity&lt;/span&gt;
        &lt;/td&gt;
        &lt;td&gt;
          Ethernet by default.
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td class="parameter"&gt;
          &lt;span&gt;Pros&lt;/span&gt;
        &lt;/td&gt;
        &lt;td&gt;
          Low price.
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td class="parameter"&gt;
          &lt;span&gt;Cons&lt;/span&gt;
        &lt;/td&gt;
        &lt;td&gt;
          Missing community, wireless connectivity, computational power.
        &lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;

  &lt;h3&gt;&lt;a href="http://beagleboard.org/"&gt;BeagleBoard&lt;/a&gt;&lt;/h3&gt;

  &lt;p&gt;
    The BeagleBoard is a low cost, high performance, low power 
    &lt;a href="http://www.ti.com/omapwireless"&gt;OMAP3&lt;/a&gt; based platform designed 
    by BeagleBoard.org community members. It is open-source and there are hundreds of
    applications developed on top of it.
  &lt;/p&gt;

  &lt;table class="zebra-striped"&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td class="parameter"&gt;
          &lt;span&gt;Price&lt;/span&gt;
        &lt;/td&gt;
        &lt;td&gt;
          BeagleBone | $89 &lt;br/&gt;
          BeagleBoard xM | $149 
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td class="parameter"&gt;
          &lt;span&gt;OS&lt;/span&gt;
        &lt;/td&gt;
        &lt;td&gt;
          Android, and major Linux distributions like Ubuntu, Debian, ArchLinux and Gentoo. 
          &lt;a href="http://pandaboard.org/content/resources/software"&gt;See supported distributions&lt;/a&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td class="parameter"&gt;
          &lt;span&gt;Connectivity&lt;/span&gt;
        &lt;/td&gt;
        &lt;td&gt;
          Ethernet by default.
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td class="parameter"&gt;
          &lt;span&gt;Pros&lt;/span&gt;
        &lt;/td&gt;
        &lt;td&gt;
          Experience, community, documentation, computational power, open-source.
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td class="parameter"&gt;
          &lt;span&gt;Cons&lt;/span&gt;
        &lt;/td&gt;
        &lt;td&gt;
          Price, wireless connectivity.
        &lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;

  &lt;h3&gt;&lt;a href="http://pandaboard.org//"&gt;PandaBoard ES&lt;/a&gt;&lt;/h3&gt;

  &lt;p&gt;
    PandaBoard is a low-cost, open &lt;a href="http://www.ti.com/omapwireless"&gt;OMAP 4&lt;/a&gt; mobile 
    software development platform.
  &lt;/p&gt;

  &lt;table class="zebra-striped"&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td class="parameter"&gt;
          &lt;span&gt;Price&lt;/span&gt;
        &lt;/td&gt;
        &lt;td&gt;
          PandaBoard ES | $189
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td class="parameter"&gt;
          &lt;span&gt;OS&lt;/span&gt;
        &lt;/td&gt;
        &lt;td&gt;
          Android, Ubuntu and Linaro.
          &lt;a href="http://pandaboard.org/content/resources/software"&gt;See supported distributions&lt;/a&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td class="parameter"&gt;
          &lt;span&gt;Connectivity&lt;/span&gt;
        &lt;/td&gt;
        &lt;td&gt;
          Ethernet connectivity and Wifi 802.11 b/g/n.
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td class="parameter"&gt;
          &lt;span&gt;Pros&lt;/span&gt;
        &lt;/td&gt;
        &lt;td&gt;
          Community, computational power, wireless connectivity, focus on mobile.
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td class="parameter"&gt;
          &lt;span&gt;Cons&lt;/span&gt;
        &lt;/td&gt;
        &lt;td&gt;
          Price.
        &lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;

  &lt;h3&gt;&lt;a href="http://www.plugcomputer.org/"&gt;Plug Computers (Sheevaplug)&lt;/a&gt;&lt;/h3&gt;

  &lt;p&gt;
    Main resource for the plug computer development community. Plugcomputer.org
    offers solutions built on a Marvell system-on-chip and focus on high performances and giving
    full connected devices readily available for developers.
  &lt;/p&gt;

  &lt;table class="zebra-striped"&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td class="parameter"&gt;
          &lt;span&gt;Price&lt;/span&gt;
        &lt;/td&gt;
        &lt;td&gt;
          GuruPlug Display | $199 &lt;br/&gt;
          D2Plug | $249
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td class="parameter"&gt;
          &lt;span&gt;OS&lt;/span&gt;
        &lt;/td&gt;
        &lt;td&gt;
          Ubuntu, FreeBSD, NetBSD, Windows CE and any other operating system that is compatible 
          with ARM CPUs.
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td class="parameter"&gt;
          &lt;span&gt;Connectivity&lt;/span&gt;
        &lt;/td&gt;
        &lt;td&gt;
          Ethernet connectivity by default.
          Model D2Plug offers integrated 802.11 b/g/n Wifi.
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td class="parameter"&gt;
          &lt;span&gt;Pros&lt;/span&gt;
        &lt;/td&gt;
        &lt;td&gt;
          Commercial support, computational power, design, wireless connectivity.
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td class="parameter"&gt;
          &lt;span&gt;Cons&lt;/span&gt;
        &lt;/td&gt;
        &lt;td&gt;
          Missing community, closed-source, price.
        &lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;

  &lt;h3&gt;&lt;a href="http://www.ionicsplug.com/"&gt;Ionics Plug&lt;/a&gt;&lt;/h3&gt;

  &lt;p&gt;
    Plug computer with main focus on connectivity and low price. Ionics, comes from the same
    family of Sheevaplug computers, but with lower prices and better features. For sure one 
    of the best solutions whenever you want to use a Plug Computer and you are searching for
    advanced wireless capabilities (WifI, Zigbee and Z-Wave ).
  &lt;/p&gt;

  &lt;table class="zebra-striped"&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td class="parameter"&gt;
          &lt;span&gt;Price&lt;/span&gt;
        &lt;/td&gt;
        &lt;td&gt;
          Nimbus 100 | $99 &lt;br/&gt;
          Stratus | $149
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td class="parameter"&gt;
          &lt;span&gt;OS&lt;/span&gt;
        &lt;/td&gt;
        &lt;td&gt;
          Debian 5 Lenny.
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td class="parameter"&gt;
          &lt;span&gt;Connectivity&lt;/span&gt;
        &lt;/td&gt;
        &lt;td&gt;
          Ethernet connectivity by default.
          Stratus model offers integrated 802.11 b/g (WPS support on Client Mode) and ZigBee.
          You can decide to change the Zigbee module for a Z-wave module.
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td class="parameter"&gt;
          &lt;span&gt;Pros&lt;/span&gt;
        &lt;/td&gt;
        &lt;td&gt;
          Commercial support, computational power, design, price, wireless connectivity.
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td class="parameter"&gt;
          &lt;span&gt;Cons&lt;/span&gt;
        &lt;/td&gt;
        &lt;td&gt;
          Missing community, closed-source.
        &lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;

  &lt;/br&gt;
  &lt;h2&gt;Considerations&lt;/h2&gt;
  &lt;p&gt;
    This is an opinionated list with the best solutions out there. If you think we are missing
    a good one  write a comment or &lt;a href="/about/"&gt;get in touch&lt;/a&gt; with us.
  &lt;/p&gt;
&lt;/div&gt;</content>
  </entry>
</feed>
