<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://lelylan.com/</id>
  <title>Lelylan - Rethink your house</title>
  <updated>2012-09-11T22:00:00Z</updated>
  <link rel="alternate" href="http://lelylan.com/"/>
  <link rel="self" href="http://lelylan.com/blog/feed.xml"/>
  <author>
    <name>Lelylan Team</name>
    <uri>http://lelylan.com</uri>
  </author>
  <entry>
    <id>tag:lelylan.com,2012-09-12:/blog/iobridge/</id>
    <title type="html">ioBridge</title>
    <published>2012-09-11T22:00:00Z</published>
    <updated>2012-09-11T22:00:00Z</updated>
    <link rel="alternate" href="http://lelylan.com/blog/iobridge/"/>
    <content type="html">&lt;div class="article"&gt;

  &lt;br/&gt;

  &lt;ul class="media-grid"&gt;
    &lt;li&gt;
    &lt;a href="https://www.iobridge.com/"&gt;&lt;img class="thumbnail" src="/images/blog/iobridge/header.png" alt="ioBridge"&gt;&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;
  &lt;a href="http://www.iobridge.com"&gt;ioBridge&lt;/a&gt; is a solution that enables everyone to connect
  easily any object to the internet envisioning a world where physical objects are interacting
  with the most important element on Earth: &lt;strong&gt;you&lt;/strong&gt;.
  &lt;/p&gt;

  &lt;p&gt;
  ioBridge allows your devices to communicate with social networks, to control and monitor any physical
  device and to take your project from prototype to the real product manufacturing and licensing
  patent-pending technologies to create Internet-enabled devices. Its target goes from
  &lt;a href="http://www.iobridge.com/manufacturers/"&gt;manufacturer&lt;/a&gt; till the
  &lt;a href="https://store.iobridge.com/"&gt;casual user&lt;/a&gt; and they offer a secure, private,
  scalable platforms from DIY home projects to commercial products and professional
  applications. 
  &lt;/p&gt;

  &lt;p&gt;
  What is really interesting is the &lt;a href="http://www.iobridge.com/labs/"&gt;lab section&lt;/a&gt;. We knew that 
  ioBridge was the mind back to &lt;a href="http://thingspeak.com"&gt;ThingSpeak&lt;/a&gt;, an IoT open source platform 
  for storing and retrieving data using HTTP commands already featured in &lt;a href="/blog/thingspeak/"&gt;
  a previous article&lt;/a&gt; but they do not stop here. They take the 20% of their time to create other
  interesting projects like CheerLights (used to enable people all around the world to link lights and 
  applications together) or ioAuth (a work in progress set of open standards that involve how devices 
  authenticate with an API).
  &lt;/p&gt;

  &lt;h2&gt;Market ready&lt;/h2&gt;

  &lt;p&gt;
  One aspect that in our opinion makes ioBridge one step further the other startups is that
  probably it's wrong to call ioBridge a startup. They exist from 2009, they have been selected
  from ReadWriteWeb as &lt;a href="http://www.nytimes.com/external/readwriteweb/2009/12/08/08readwriteweb-top-10-internet-of-things-products-of-2009-74048.html"&gt;top ten Internet of Things (2009)&lt;/a&gt;
  and from New York Times as one of the &lt;a href="http://www.iobridge.net/projects/2010/01/iobridge-5-technology-trends-to-watch-in-2010/"&gt;five technologies to watch in 2010&lt;/a&gt;
  and they make real businesses with partnerships they have built in those 4 years with names like
  &lt;a href="http://www.powercastsensors.com/remote-monitoring-integration-with-iobridge-pro-20120116/"&gt;Powercast&lt;/a&gt;,
  &lt;a href="http://www.ereleases.com/pr/solis-usa-offers-professional-energy-services-retail-applications-based-remote-monitoring-control-technology-iobridge-54087"&gt;Solis&lt;/a&gt;
  and &lt;a href="http://www.prnewswire.com/news-releases/geosyntec-consultants-signs-strategic-teaming-agreement-for-high-performance-green-infrastructure-computing-platform-123545629.html"&gt;Geosyntec&lt;/a&gt;.
  &lt;/p&gt;

  &lt;h2&gt;Give me some hardware&lt;/h2&gt;

  &lt;p&gt;
  ioBridge has an &lt;a href="https://store.iobridge.com/"&gt;online shop&lt;/a&gt; where you can buy hardware.
  ioBridge's technology is designed to make it cost effective and easy for everyone to internet-enable almost
  anything. You can find &lt;a href="http://www.iobridge.com/products/sensors_and_actuators.html"&gt;sensors and 
    actuators&lt;/a&gt; that enable customers to monitor things like temperature and humidity or to control things
  like lights and &lt;a href="http://www.iobridge.com/products/web_gateways.html"&gt;web gateways&lt;/a&gt; to easily
  connect ioBridge provided or third-party sensors, switches, and other devices to the Internet.
  &lt;/p&gt;

  &lt;p&gt;
  But they do not stop here. For serious stuff ioBridge licenses &lt;a href="http://www.iobridge.com/manufacturers/"&gt;
    iota&lt;/a&gt;, a really cool piece of hardware to build low cost and scalable applications. The best
  part about iota is that you get immediate connectivity using wifi or ethernet using high encryption
  and secure tunneling to and from web services. With this kind of solutions everything from the
  hardware, licensing, and cloud services are ready to use and to scale. 
  &lt;/p&gt;

  &lt;ul class="media-grid"&gt;
    &lt;li&gt;
    &lt;a href="https://www.iobridge.com/"&gt;&lt;img class="thumbnail" src="/images/blog/iobridge/hardware.png" alt="ioBridge Hardware"&gt;&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;h2&gt;Connecting to the web with realtime.io&lt;/h2&gt;

  &lt;p&gt;
  ioBridge solution consists of low-cost embedded hardware and firmware that is tightly integrated with
  scalable cloud services and dashboards. To reach this result they created &lt;a href="http://realtime.io"&gt;realtime.io&lt;/a&gt;,
  a gateway between devices and applications that offers real-time data plus ability to remote control and
  monitor your devices. 
  &lt;/p&gt;

  &lt;p&gt;
  Their embedded devices are designed to be &lt;a href="http://www.iobridge.com/technology/"&gt;easy to install and connect&lt;/a&gt;
  to realtime.io. They bypass firewalls and communicate directly to the ioBridge servers on the web. No port-forwarding
  or dynamic DNS configuration is required making installation easy for the everyday user. They are able to support
  100.000 to 1.000.000 devices per server in low-traffic situations.
  &lt;/p&gt;

  &lt;p&gt;
  ioBridge provides a free web interface and configurable dashboard. Developers can create new dashboards to
  monitor and control almost anything without writing any software, but just in case, they provide an API
  that can be used by developers or customers to create their own custom applications or to integrate with
  their own or other third-party systems.
  &lt;/p&gt;

  &lt;h2&gt;ioBridge Connect&lt;/h2&gt;

  &lt;p&gt;
  To setup, monitor, and control your devices you must use the &lt;a href="https://www.iobridge.com/interface"&gt;ioBridge Interface&lt;/a&gt;.
  Once you have purchased one of the ioBridge gateways you can use ioBridge to control it. Create your
  account, add the link for your gateway and unlock all its features. The default account
  is &lt;a href="http://iobridge.com/signup/index.html"&gt;free&lt;/a&gt;.
  &lt;/p&gt;

  &lt;ul class="media-grid"&gt;
    &lt;li&gt;
    &lt;a href="https://www.iobridge.com/"&gt;&lt;img class="thumbnail" src="/images/blog/iobridge/dashboard.png" alt="ioBridge dashboard"&gt;&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;
  Once you have signed in you can find these sections:
  &lt;/p&gt;

  &lt;ol&gt;
    &lt;li&gt;
    &lt;a href="http://connect.iobridge.com/docs/interface/"&gt;Dashboard&lt;/a&gt;.
    Customizable home screen for quick access to modules and widgets
    &lt;/li&gt;
    &lt;li&gt;
    &lt;a href="http://connect.iobridge.com/docs/web-gateway-modules/module-configuration/"&gt;Modules&lt;/a&gt;.
    Table of your linked gateways for access to configuration, monitoring and control.
    &lt;/li&gt;
    &lt;li&gt;
    &lt;a href="http://connect.iobridge.com/docs/widgets/"&gt;Widgets&lt;/a&gt;.
    Links to your widgets.
    &lt;/li&gt;
    &lt;li&gt;
    &lt;a href="http://connect.iobridge.com/docs/actions/"&gt;Actions&lt;/a&gt;.
    Access to actions, events and links to create new actions.
    &lt;/li&gt;
  &lt;/ol&gt;

  &lt;h2&gt;Functionalities explained&lt;/h2&gt;

  &lt;h3&gt;&lt;a href="http://connect.iobridge.com/docs/widgets/"&gt;Widgets&lt;/a&gt;&lt;/h3&gt;

  &lt;p&gt;
  Widgets are simple script objects that either control outputs or monitor inputs. ioBridge offers
  different kind of widgets to &lt;a href="http://connect.iobridge.com/docs/widgets/io/"&gt;monitor i/o&lt;/a&gt;,
  &lt;a href="http://connect.iobridge.com/docs/widgets/servo/"&gt;control servo positions&lt;/a&gt;
  and &lt;a href="http://connect.iobridge.com/docs/widgets/chart/"&gt;visualize charts&lt;/a&gt;.
  You can also place the widget in-line into your blog or website by using the automatically
  generated embedded code and customizing the look and feel with few lines of CSS.
  &lt;/p&gt;

  &lt;h3&gt;&lt;a href="http://connect.iobridge.com/docs/actions/"&gt;Actions&lt;/a&gt;&lt;/h3&gt;

  &lt;p&gt;
  Actions are a mix between web-hooks to post realtime data to external services and integrated
  applications that can easily enhance your functionalities. In this ioBridge takes the best feature of
  ThingSpeak giving you extra applications like text messaging, twitter integration, mail notifications and more.
  &lt;/p&gt;

  &lt;h3&gt;&lt;a href="http://connect.iobridge.com/docs/onboard-actions/"&gt;Rules&lt;/a&gt;&lt;/h3&gt;

  &lt;p&gt;
  A rule is essentially an if/then statement like "If the temperature is too high, then 
  turn on the fan". You can break that rule down into two distinct parts: a condition
  and an action. With ioBridge you can create multiple conditions and multiple actions under
  each rule and If there are multiple conditions for a rule, all the conditions must be true
  for the action(s) to be executed. In rules with multiple actions, all of the actions will
  be executed when the rule is true. This service lives directly on the physical board but the
  definition part is online through web based wizards.
  &lt;/p&gt;

  &lt;h3&gt;&lt;a href="http://connect.iobridge.com/api/"&gt;API&lt;/a&gt;&lt;/h3&gt;

  &lt;p&gt;
  The APIs are not as rich as we could expect from a complete service like ioBridge.
  They mainly offer a way to access to &lt;a href="http://connect.iobridge.com/api/data-feed-api/"&gt;data feeds&lt;/a&gt;
  for every device registered on your account and a bit more. The feed service returns a JSON or XML
  snapshot of your device input and output states as well as extra meta information you can set such as
  location, latitude, longitude and more.
  &lt;/p&gt;

  &lt;p&gt;
  Sample request.
  &lt;/p&gt;

  &lt;pre&gt;
http://www.iobridge.com/api/module/feed.json?key=zTFNFDol7706vSZnuxel&lt;/pre&gt;

  &lt;p&gt;
  Sample response.
  &lt;/p&gt;

  &lt;pre&gt;
{
    "module": {
        "serial":   "24000XXX",
        "label":    "Monitor",
        "lat": "43.772828",
        "lon": "11.249488",
        "location": "Plutolandia, FN",
        "datetime": "Dec-24-2008 00:35:22 AM",
        "status":   "online",
        "channels": [{
            "channel": "1",
            "label":   "Channel 1", 
            "AnalogInput": "384", 
            "AnalogInputRaw": "384", 
            "AnalogInputScale": "Raw", 
            "DigitalInput": "Off", 
            "DigitalInputState": "0", 
            "DigitalOutput": "On", 
            "DigitalOutputState": "1"
        }]
    }
}&lt;/pre&gt;

  &lt;h2&gt;Conclusions&lt;/h2&gt;

  &lt;p&gt;
  ioBridge is a full featured platform and the only one at the same level of &lt;a href="http://cosm.com"&gt;cosm&lt;/a&gt;.
  They have easy to connect hardware and a basic API to improve the platform. It's easy 
  &lt;a href="http://connect.iobridge.com/docs/getting-started-with-the-internet-of-things"&gt;to start with&lt;/a&gt;
  and we were quite impressed by the &lt;a href="http://connect.iobridge.com/docs/"&gt;complete documentation&lt;/a&gt;,
  the &lt;a href="http://connect.iobridge.com/tutorials/"&gt;tutorials&lt;/a&gt; and the commercial applications
  where ioBridge is used. From a business point of view lot of IoT startup should learn from them.
  &lt;/p&gt;

  &lt;p&gt;
  Anyway, there is a tradeoff. Their business model is based on collaboration where partners
  uses their products, both hardware and software. One limitation comes up quite clear. As far
  as they make money allowing only their own products &lt;strong&gt;they will not create an open platform&lt;/strong&gt;. 
  The poor APIs clearly show this direction. This limit is a strong one.
  &lt;/p&gt;

  &lt;p&gt;
  We do not like the ioBridge business model, but those are just personal points of view. The important
  point is that right now they are doing well. We also shouldn't forget that they are contributing
  to the community with cool stuff like &lt;a href="www.thingspeak.com"&gt;ThingSpeak&lt;/a&gt;. We only wished they
  could be a bit more open. Will this happen? And will it be sustainable?
  &lt;/p&gt;

&lt;/div&gt;</content>
    <summary type="html">ioBridge allows your devices to communicate with social networks, to control and monitor any physical device and to take your project from prototype to the real product manufacturing and licensing patent-pending technologies to create Internet-enabled devices...</summary>
  </entry>
  <entry>
    <id>tag:lelylan.com,2012-09-05:/blog/bugswarm/</id>
    <title type="html">BUGswarm</title>
    <published>2012-09-04T22:00:00Z</published>
    <updated>2012-09-04T22:00:00Z</updated>
    <link rel="alternate" href="http://lelylan.com/blog/bugswarm/"/>
    <content type="html">&lt;div class="article"&gt;

  &lt;br/&gt;

  &lt;ul class="media-grid"&gt;
    &lt;li&gt;
    &lt;a href="https://developer.bugswarm.net/"&gt;&lt;img class="thumbnail" src="/images/blog/bugswarm/header.png" alt="BUGswarm"&gt;&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;
  &lt;a href="http://developer.bugswarm.net"&gt;BUGswarm&lt;/a&gt; is a cloud-based platform created by
  &lt;a href="http://buglabs.net"&gt;Bug Labs&lt;/a&gt;, used to acquire data from embedded devices and
  control them. The idea behind it is based on four concepts: resources, swarms,
  invitations and participations.
  &lt;/p&gt;

  &lt;p&gt;To simplify matters, you have one or more
  &lt;em&gt;resources&lt;/em&gt; that produce and consume data. Those resources are grouped into
  &lt;em&gt;swarms&lt;/em&gt;. A resource could be your mobile phone and the swarm could
  be a group that puts together all mobile devices you own. Once a resource is added to
  a swarm, you can open an HTTP stream connection (&lt;em&gt;participation&lt;/em&gt;)
  and get realtime information about the exchanged messages. About mobile
  phones this means i.e. that we can have realtime information about their
  locations or accelerations.
  &lt;/p&gt;

  &lt;p&gt;
  Finally, resources can belong to different
  swarms. This means that you can invite other resources to be part of your swarm and vice
  versa, you can accept invitation for your resources to be part of somebody else's swarms.
  &lt;/p&gt;

  &lt;h2&gt;BUGswarm API&lt;/h2&gt;

  &lt;p&gt;
  It can be a little tricky to get started with BUGswarm. See the following detailed description
  of the main concepts behind it with some examples showing how they are implemented.
  &lt;/p&gt;

  &lt;h3&gt;&lt;a href="http://developer.bugswarm.net/restful_api_keys.html"&gt;API Keys&lt;/a&gt;&lt;/h3&gt;

  &lt;p&gt;
  The API Key lets you create a valid key to access BUGswarms services. To create a
  valid key you have to 'basic authenticate' with your &lt;code&gt;username:password&lt;/code&gt;.
  You should also choose whether the key is used to access the &lt;em&gt;participation&lt;/em&gt; services (which includes
  participation API) or the &lt;em&gt;configuration&lt;/em&gt; services (which includes resource, swarms and
  invitation API) or both.
  &lt;/p&gt;

  &lt;p&gt;
  Sample request creating a key to access to the configuration services.
  &lt;/p&gt;

&lt;pre&gt;
curl -X POST --user "username:password" http://api.bugswarm.net/keys/configuration
&lt;/pre&gt;

  &lt;p&gt;
  Sample response.
  &lt;/p&gt;

&lt;pre&gt;
[
  {
    "created_at": "2011-10-21T15:37:35.636Z", 
    "key": "b8c2382d0fd9123f3d0ccc760afa03854c652fdb", 
    "status": "active", 
    "type": "configuration", 
    "user_id": "username"
  }
]
&lt;/pre&gt;

  &lt;h3&gt;&lt;a href="http://developer.bugswarm.net/restful_resources.html"&gt;Resources&lt;/a&gt;&lt;/h3&gt;

  &lt;p&gt;
  A resource is an application or device that is configured to &lt;em&gt;produce&lt;/em&gt;
  or &lt;em&gt;consume&lt;/em&gt; data. A resource is a physical device, such as a smartphone
  or Arduino, as well as a web or mobile app. Anything than can communicate through
  HTTP can be configured to join a swarm and produce and consume data.
  Here is a sample request creating a resource representing a smartphone.
  &lt;/p&gt;

&lt;pre&gt;
curl -X POST http://api.bugswarm.net/resources
     --header "x-bugswarmapikey: &amp;lt;api-key&amp;gt;"
     --header "content-type: application/json"
     -d '{
           "name": "My resource",
            "machine_type": "smartphone",
            "description": "HTC Dream",
            "position": { "longitude": 0, "latitude": 0 }
         }'
&lt;/pre&gt;


  &lt;h3&gt;&lt;a href="http://developer.bugswarm.net/restful_swarms.html"&gt;Swarms&lt;/a&gt;&lt;/h3&gt;

  &lt;p&gt;
  A swarm is a collection of resources. Once a swarm is created, users can invite another
  user's resources to become its member or can accept invitations to share a resource with
  somebody else's swarms. The owner of the swarm can control what level of access
  (&lt;em&gt;production&lt;/em&gt; and &lt;em&gt;consumption&lt;/em&gt;) that each resource in the swarm has.
  &lt;/p&gt;

  &lt;p&gt;
  Sample request creating a swarm representing my mobile phones. When including a
  resource simply specify its ID and its level of access (the resource must be
  previously created).
  &lt;/p&gt;

&lt;pre&gt;
curl -X POST http://api.bugswarm.net/swarms
     --header "x-bugswarmapikey: &amp;lt;api-key&amp;gt;" 
     --header "content-type: application/json"
     -d '{
          "name": "My smartphones",
          "description": "I'm owesome!",
          "public": false,
          "resources": [{ 
            "resource_id": "&amp;lt;resource-id&amp;gt;",
            "resource_type": "consumer"
          }]
        }'
&lt;/pre&gt;

  &lt;h3&gt;&lt;a href="http://developer.bugswarm.net/restful_invitations.html"&gt;Invitations&lt;/a&gt;&lt;/h3&gt;

  &lt;p&gt;
  An invitation provides a social presence by inviting another user's resources to
  join your swarms, sharing the production and consumption of data. A user can freely
  accept or reject invitations from other users.
  &lt;/p&gt;

  &lt;p&gt;
  Sample request where a resource with ID &lt;resource-id&gt; is shared as data producer
  with the user &lt;username&gt;.
  &lt;/p&gt;

&lt;pre&gt;
curl -X POST http://api.bugswarm.net/swarms/&amp;lt;swarm-id&amp;gt;/invitations
     --header "x-bugswarmapikey: &amp;lt;api-key&amp;gt;" 
     --header "content-type: application/json"
     -d '{
    "description": "I want to share my HTC Dream data with you Bob",
      "to": "&amp;lf;username&amp;gt;",
      "resource_id": "&amp;lt;resource-id&amp;gt;",
      "resource_type": "producer"
  }
&lt;/pre&gt;

  &lt;h3&gt;&lt;a href="http://developer.bugswarm.net/participation_api.html"&gt;Partecipation&lt;/a&gt;&lt;/h3&gt;

  &lt;p&gt;
  Once connected, resources may produce or consume data. Throughout the
  participation API the BUGswarm platform lets you exchange messages, presence
  notifications and error messages. The Participation API uses HTTP
  streaming, meaning that once a connection has been opened, bidirectional
  communication between the resource and the swarm may continue until the
  connection is closed.
  &lt;/p&gt;

  &lt;p&gt;
  Sample request opening a stream between the swarm &amp;lt;swarm-id&amp;gt; and the resource
  &lt;resource-id&gt;.
  &lt;/p&gt;

&lt;pre&gt;
curl -X POST 'http://api.bugswarm.net/stream?
             swarm_id=&amp;lt;swarm-id&amp;gt;&amp;resource_id=&amp;lt;resource-id&amp;gt;'
&lt;/pre&gt;

  &lt;p&gt;
  Once a connection has been successfully opened you can send and receive messages.
  Here a sample request sending the acceleration value of a smartphone.
  &lt;/p&gt;

&lt;pre&gt;
{
  "message":
  {
    "to": [ { "swarm": "&amp;lt;swarm-id&amp;gt;", "resource": "&amp;lt;resource-ide&amp;gt;" } ],
    "payload": { "acceleration" : 0.03242 }
   }
}
&lt;/pre&gt;

  &lt;h3&gt;&lt;a href="http://developer.bugswarm.net/participation_api.html"&gt;Connectors (Hardware)&lt;/a&gt;&lt;/h3&gt;

  &lt;p&gt;
  A connector is a client-side device-specific application that allows your
  embedded devices to participate on BUGswarm being able to produce and
  consume data. In other words a connector uses the participation API to
  exchange a sequence of messages that lets your swarms know the device status.
  &lt;a href="http://developer.bugswarm.net/hardware.html"&gt;Learn more&lt;/a&gt;.
  &lt;p&gt;


  &lt;h2&gt;Conclusions&lt;/h2&gt;

  &lt;p&gt;
  The documentation is clear and you can find &lt;a href="http://developer.bugswarm.net/tutorial.html"&gt;step by step tutorials&lt;/a&gt;
  that give all the needed information to get started. The API is simple and follows
  pretty well the RESTful architecture. To easily access to the API, BUGswarm offers a
  &lt;a href="https://github.com/buglabs/bugswarm-tools"&gt;command line&lt;/a&gt; written in Python, 
  as well as a &lt;a href="https://github.com/buglabs/bugswarm-js"&gt;Javascript library&lt;/a&gt;.
  The key concept that differentiate this service from all others, in our opinion, is the
  invitation one. It easily let you share resources with other users and as far as we know, no
  other service does this.
  &lt;/p&gt;

  &lt;p&gt;
  In the other side we were expecting more examples on real case scenarios.
  The communication with real hardware is not clear. A simple example on how to integrate
  Arduino would be enough to improve this part.
  The authorization system does not provide a flexible mechanism. As far as we could see
  there is also no way to revoke an API key once generated.
  &lt;/p&gt;

  &lt;p&gt;
  As final result, BUGswarm looks like the cool kid that uses cutting edge technologies and
  that follow the realtime trend characterizing the web nowadays. Unluckily it misses to target
  the real needs and the physical world. We hope to see soon more examples about it.
  &lt;/p&gt;

&lt;/div&gt;</content>
    <summary type="html">BUGswarm is a cloud-based platform created by Bug Labs, used to acquire data from and to control embedded devices. The idea behind it is based on four concepts: resources, swarms, invitations and participations. Trying to simplify you have one or more resources that produce and consume data that are grouped into swarms...</summary>
  </entry>
  <entry>
    <id>tag:lelylan.com,2012-07-30:/blog/thingspeak/</id>
    <title type="html">ThingSpeak</title>
    <published>2012-07-29T22:00:00Z</published>
    <updated>2012-07-29T22:00:00Z</updated>
    <link rel="alternate" href="http://lelylan.com/blog/thingspeak/"/>
    <content type="html">&lt;div class="article"&gt;

  &lt;br/&gt;

  &lt;ul class="media-grid"&gt;
    &lt;li&gt;
    &lt;a href="https://www.thingspeak.com/"&gt;&lt;img class="thumbnail" src="/images/blog/thingspeak/header.png" alt="ThingSpeak"&gt;&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;
  &lt;a href="https://www.thingspeak.com/"&gt;ThingSpeak&lt;/a&gt; is an open platform designed to enable
  connections between things and people. Reading through their blog you can find different
  examples and, I've to admit, some made me smile. The best is for sure the
  &lt;a href="http://community.thingspeak.com/2012/06/a-twitter-powered-gumball-machine-built-on-thingspeak-arduino/"&gt;gum-ball machine&lt;/a&gt;
  that being able to communicate with Twitter gets you a tasty gum-ball whenever you send a 
  tweet to its account. I guess this could be a killer application for kids.
  &lt;/p&gt;

  &lt;p&gt;
  &lt;strong&gt;ThingSpeak API is open source&lt;/strong&gt; and available on 
  &lt;a href="https://github.com/iobridge/thingspeak"&gt;github&lt;/a&gt;. This makes it different from 
  any other service out there at least for two reasons. The first one is that you can run 
  ThingSpeak on a private network, on your own servers. The second one is that you can take 
  the source code and make changes, contributing with new features. Since it has been 
  released in March 2011, it has been installed on over 500 servers. Nice numbers.
  &lt;/p&gt;

  &lt;p&gt;
  ThingSpeak is a Ruby on Rails 3.0 application and it includes everything to get 
  started: user management, API key management, channel management and charting. 
  The license for ThingSpeak is under GPLv3 for open source use and can be licensed 
  from &lt;a href="http://www.iobridge.com/"&gt;ioBridge&lt;/a&gt; for closed source applications.
  &lt;/p&gt;

  &lt;h2&gt;What can I do?&lt;/h2&gt;

  &lt;p&gt;
  Think at ThingSpeak as a data container accessible via simple HTTP requests. Data can 
  come from anything. Blood sugar levels measured by a glucose meter, server uptime or 
  location info from a mobile phone. All of this data is stored in a &lt;code&gt;channel&lt;/code&gt;.
  &lt;/p&gt;

  &lt;p&gt;
  When you need to visualize your data, ThingSpeak has dynamic &lt;code&gt;charts&lt;/code&gt; and an API 
  to customize them. The charts are used to display sensor data over time and they work on all 
  devices by using JavaScript. The chart types supported are Line, Bar, Column, and Step and you
  can set colors, sizing, and labels to fit your needs.
  &lt;/p&gt;

  &lt;ul class="media-grid"&gt;
    &lt;li&gt;
    &lt;a href="https://www.thingspeak.com/"&gt;&lt;img class="thumbnail" src="/images/blog/thingspeak/graph.png" alt="ThingSpeak"&gt;&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;h2&gt;Applications approach&lt;/h2&gt;

  &lt;p&gt;
  ThingSpeak offers several &lt;code&gt;applications&lt;/code&gt; to let channels communicate with 
  other services and augment ThingSpeak capabilities. Right now we can find four of them.
  &lt;/p&gt;

  &lt;h3&gt;&lt;a href="https://www.thingspeak.com/apps/thingtweets"&gt;ThingTweet&lt;/a&gt;&lt;/h3&gt;

  &lt;p&gt;
  ThingTweet let you easily send status updates to Twitter along with storing your data in a 
  ThingSpeak Channel at the same. For example you can have your garage door twitting "You left 
  the door open" or your house saying "Today's power use was 6150 watts".
  &lt;/p&gt;

  &lt;pre&gt;
POST /apps/thingtweet/1/statuses/update
Host: api.thingspeak.com

api_key={thingtweet_key}&amp;status=Your+dear+tulip+is+getting+thirsty.&lt;/pre&gt;
  

  &lt;h3&gt;&lt;a href="https://www.thingspeak.com/apps/thinghttp"&gt;ThingHTTP&lt;/a&gt;&lt;/h3&gt;

  &lt;p&gt;
  ThingHTTP allows a micrcontroller to connect to any web service using HTTP. It lets you
  create a resource on the web and then control it using a simple API. It supports GET, 
  POST, PUT, and DELETE methods, SSL, Basic Authentication and more.
  &lt;p&gt;

  &lt;p&gt;
  Lets make an example with &lt;a href="https://www.twilio.com/"&gt;Twilio&lt;/a&gt;. Twilio is a cloud 
  communication platform for phone calls and SMS messages. You can access to its functionalities
  through its API, but it requires HTTPS and Basic Authentication which is perfect for 
  high-level devices like phones, but nearly impossible for an embedded device like Arduino.
  As ThingHTTP allows a device to make HTTPS calls to any service it easily let you interface 
  the Twilio API with your device.
  &lt;/p&gt;

  &lt;p&gt;
  Sample request.
  &lt;/p&gt;

  &lt;pre&gt;
POST /apps/thinghttp/send_request
Host: api.thingspeak.com

api_key={thinghttp_key}&amp;message=I+call+you+because+the+water+is+finished&lt;/pre&gt;

  &lt;h3&gt;&lt;a href="https://www.thingspeak.com/apps/reacts"&gt;Reacts&lt;/a&gt;&lt;/h3&gt;

  &lt;p&gt;
  React allows you to trigger a request when your channel meets a certain condition. For
  example, you can have your thermostat turn on by the time you get home from work or you
  can post a Twitter update when your power use is higher than normal.
  &lt;/p&gt;

  &lt;p&gt;
  React let you check if a field:
  &lt;/p&gt;

  &lt;ol&gt;
    &lt;li&gt;&lt;code&gt;contains&lt;/code&gt;, &lt;code&gt;starts with&lt;/code&gt;, &lt;code&gt;ends with&lt;/code&gt;,
    &lt;code&gt;is equal to&lt;/code&gt; or &lt;code&gt;is not equal to&lt;/code&gt; a string.
    &lt;/li&gt;
    &lt;li&gt;&lt;code&gt;is greater than&lt;/code&gt;, &lt;code&gt;is less than&lt;/code&gt; or &lt;code&gt;is equal
      to&lt;/code&gt; a number. 
    &lt;/li&gt;
    &lt;li&gt;
    &lt;code&gt;is farther than&lt;/code&gt; or &lt;code&gt;is within&lt;/code&gt; a geo location.
    &lt;/li&gt;
  &lt;/ol&gt;

  &lt;p&gt;
  You can test your condition on every insert or on a periodic basis and differently
  by the other services you do not have an API to create a reaction. You can do it only
  through the ThingSpeak web interface.
  &lt;/p&gt;

  &lt;h3&gt;&lt;a href="https://www.thingspeak.com/apps/tweetcontrol"&gt;Tweetcontrol&lt;/a&gt;&lt;/h3&gt;

  &lt;p&gt;
  TweetControl allows you to receive notifications from your Twitter account when using
  a specific &lt;code&gt;#hashtag&lt;/code&gt;. It uses the Twitter Streaming API, triggering changes
  to your channels in real-time.
  &lt;/p&gt;

  &lt;p&gt;
  The flow is straight forward. You create a new TweetControl, fill the twitter screen
  name to tied it to a twitter user, enter a hashtag to listen for (e.g. &lt;code&gt;#openlight&lt;/code&gt;)
  and select a ThingHTTP request to execute. Also in this case there is not an API.
  &lt;/p&gt;

  &lt;h2&gt;Conclusions&lt;/h2&gt;

  &lt;p&gt;
  As you can see in this article we didn't describe the 
  &lt;a href="http://community.thingspeak.com/documentation/api/"&gt;ThingSpeak API&lt;/a&gt;. 
  We didn't do that for two reasons: the first is that the creation of &lt;code&gt;channels
  &lt;/code&gt; and &lt;code&gt;charts&lt;/code&gt; is straightforward; the second is that the real 
  power of ThingSpeak does not lies in its API, but on its applications.
  &lt;/p&gt;

  &lt;p&gt;
  Applications are a key element to build a successful Internet of Things. Only when it will
  interacts with all services out there we will be able to see its real power. In this 
  ThingSpeak is good example of how things should be done. We saw some applications in 
  action and we are looking forward for new ones to come.
  &lt;/p&gt;

  &lt;p&gt;
  We also liked the presence of tutorials explaining how to connect ThingSpeak with the 
  real world. We can find examples about 
  &lt;a href="http://community.thingspeak.com/tutorials/wireless/connecting-xbee-wireless-networks-to-thingspeak-via-the-connectport-x2-running-xig/"&gt;connecting XBee wireless networks&lt;/a&gt;,
  &lt;a href="http://www.frank-zhao.com/thingspeak_mbed_tut1/"&gt;temperature monitoring using mbed&lt;/a&gt;, 
  &lt;a href="http://community.thingspeak.com/tutorials/netduino/create-your-own-web-of-things-using-the-netduino-plus-and-thingspeak/"&gt;Netduino integration&lt;/a&gt; and of course about
  &lt;a href="http://community.thingspeak.com/tutorials/arduino/using-an-arduino-ethernet-shield-to-update-a-thingspeak-channel/"&gt;Arduino&lt;/a&gt;.
  Those kind of tutorial are never enough.

  &lt;/p&gt;

  &lt;p&gt;
  Just two notes before closing the article. First, if compared with
  &lt;a href="http://lelylan.com/blog/cosm/"&gt;Cosm&lt;/a&gt; or
  &lt;a href="http://lelylan.com/blog/evrythng/"&gt;EVRYTHNG&lt;/a&gt;
  the documentation can be surely improved. The feeling is that the site has all 
  docs, tutorials and examples we need to build great stuff, but it could be better
  organized to attract new developers. Second, they are missing some core concepts 
  like oauth2 or devices provisioning which are a must in a service that wants to 
  get into the Internet of Things market.
  &lt;/p&gt;

&lt;/div&gt;</content>
  </entry>
  <entry>
    <id>tag:lelylan.com,2012-07-26:/blog/evrythng/</id>
    <title type="html">EVRYTHNG</title>
    <published>2012-07-25T22:00:00Z</published>
    <updated>2012-07-25T22:00:00Z</updated>
    <link rel="alternate" href="http://lelylan.com/blog/evrythng/"/>
    <content type="html">&lt;div class="article"&gt;

  &lt;br/&gt;

  &lt;ul class="media-grid"&gt;
    &lt;li&gt;
    &lt;a href="http://evrythng.net/"&gt;&lt;img class="thumbnail" src="/images/blog/evrythng/header.png" alt="Evrythng"&gt;&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;
  &lt;a href="http://evrythng.net/"&gt;EVRYTHNG&lt;/a&gt; is a platform used to create Active Digital 
  Identities. These are unique online profiles for products and other objects to make them 
  part of the Web. In this way every physical thing can be digitally connected.
  &lt;/p&gt;

  &lt;p&gt;
    For example you could have a bike that tells you where it is placed if it has been moved, 
    a smart meter that turns on your washing machines at the cheapest times or a camera that 
    suggests you where to go to to get the perfect shots. All of this is based around the 
    Active Digital Identity: the idea of having an online profile for every physical object.
  &lt;/p&gt;

  &lt;p&gt;
  EVRYTHNG has a clear target which can be split in three groups.
  &lt;/p&gt;

  &lt;ol&gt;
    &lt;li&gt;
    &lt;b&gt;Marketers&lt;/b&gt; to create digital experiences and new services built around the 
    relationship between a customer and their product, improving the product experience.
    &lt;/li&gt;
    &lt;li&gt;
    &lt;b&gt;Manufacturers&lt;/b&gt; to create products with personalized digital experiences already 
    embedded and build applications and services that store data and real-time updates 
    from the physical objects.
    &lt;/li&gt;
    &lt;li&gt;
    &lt;b&gt;Developers&lt;/b&gt; to create applications that stores and uses real-time information 
    related to the physical objects and to design new way to interact with them.
    &lt;/li&gt;
  &lt;/ol&gt;

  &lt;p&gt;
  You can start using EVRYTHNG today for free managing up to 1000 Active Digital Identities
  (which are more than enough for different scenarios) and 100MB of storage. Other plans are 
  not available right now and if you have bigger needs, you need to get in touch with the team. 
  &lt;/p&gt;

  &lt;p&gt;
  They have a good communication. You can follow them on &lt;a href="https://twitter.com/connectevrythng"&gt;
  twitter&lt;/a&gt; or on their &lt;a href="http://www.webofthings.org/"&gt;blog&lt;/a&gt;, which as far as I 
  can remember it is one of the first who started to talk about the Internet of things four 
  years ago. Quite impressive in our opinion.
  &lt;/p&gt;


  &lt;h2&gt;EVRYTHNG API&lt;/h2&gt;

  &lt;p&gt;
  To make all of this real, EVRYTHNG has created a platform to easily create third party 
  applications and analytics around Active Digital Identities (from now on ADIs), all of 
  this through a RESTful API and a secure software infrastructure that let you easily 
  connect your objects to the web.
  &lt;/p&gt;

  &lt;p&gt;
  Going more in details the infrastructure provides services for accessing, creating, 
  storing, manipulating, sharing, or searching the ADIs for millions of real-world objects, 
  and also a set of services and tools that can be useful for such applications. 
  &lt;/p&gt;

  &lt;p&gt;
  EVRYTHNG is currently in closed Beta and is available only to a limited group of commercial 
  and academic partners. Anyway, I'm sure that signing up proposing ideas you want to develop 
  will give you an early access. The main concepts are easy to get and the documentation let 
  you understand the service step by step. Here an introduction.
  &lt;/p&gt;

  &lt;blockquote&gt;
    &lt;p&gt;
    &lt;code&gt;Thngs&lt;/code&gt; (it is not misspelled, they call it in this way) have various 
    &lt;code&gt;Properties&lt;/code&gt; and can be organized into &lt;code&gt;Collections&lt;/code&gt;, and 
    operated on by &lt;code&gt;Users&lt;/code&gt; and &lt;code&gt;Groups&lt;/code&gt;. Access control schemes 
    can be used to decide who can interact with what resource and how. This is all you 
    need to know to have a basic idea. Lets dig in deep.
    &lt;/p&gt;
  &lt;/blockquote&gt;

  &lt;p&gt;
  It accept JSON-P callbacks by adding a &lt;code&gt;?callback&lt;/code&gt; parameter to any GET call
  so that you can have the results wrapped in a JSON function and they limit requests to API
  to 5000 per day.
  &lt;/p&gt;

  &lt;p&gt;
  The services are not complex and they are well described in the web site, so here we just 
  sum them up.
  &lt;/p&gt;

  &lt;h3&gt;&lt;a href="http://dev.evrythng.net/#thngs"&gt;THNGS&lt;/a&gt;&lt;/h3&gt;
  
  &lt;p&gt;
  An abstract notion of an object which has location and property data associated to it. Also 
  called Active Digital Identities (ADIs), these resources can model real-world elements such 
  as persons, places, cars, guitars, mobile phones, etc. 
  &lt;/p&gt;

  &lt;p&gt;
  You can set different params like a name, longitude, latitude which can be used to identify 
  the thng, but also to enable search queries later on. Nice the ability to create many things 
  at once which returns a list of IDs for the newly created resources.
  &lt;/p&gt;

  &lt;p&gt;
  Sample &lt;code&gt;thng&lt;/code&gt; representation.
  &lt;/p&gt;

&lt;pre&gt;
{
"id": "44ed3d1ad0b1cdc02490081ca",
"name": "Television",
"description": "Sony Smart Television",
"is_public": false,
"latitude": "43.772828",
"longitude": "11.249488",
"created_at": "2011-04-18T23:23:56Z"
}&lt;/pre&gt;

  &lt;h3&gt;&lt;a href="http://dev.evrythng.net/#properties"&gt;PROPERTIES&lt;/a&gt;&lt;/h3&gt;

  &lt;p&gt;
  A Thng can have properties which are arbitrary key/value pairs to store any data. Values could 
  be either text or binary.
  &lt;/p&gt;

  &lt;p&gt;
  Sample &lt;code&gt;property&lt;/code&gt; representation.
  &lt;/p&gt;

&lt;pre&gt;
{
"key": "Volume",
"value": "20"
"created_at": "2011-04-18T12:10:56Z"
}&lt;/pre&gt;


  &lt;h3&gt;&lt;a href="http://dev.evrythng.net/#collections"&gt;COLLECTIONS&lt;/a&gt;&lt;/h3&gt;

  &lt;p&gt;
  A collection is a group of Thngs. Collections can be created by various users, and the same 
  Thng can be in more than one collection.
  &lt;/p&gt;

  &lt;p&gt;
  Sample &lt;code&gt;collection&lt;/code&gt; representation.
  &lt;/p&gt;

&lt;pre&gt;
{
"id": "44ed3d1ad0b1cdc02490081de",
"name": "Electronics",
"description": "Contains all electronics in my house",
"is_public": true,
"created_at": "2012-07-18T23:23:56Z"
}&lt;/pre&gt;

  &lt;h3&gt;Other stuff&lt;/h3&gt;

  &lt;p&gt;
  There is also a &lt;a href="http://dev.evrythng.net/#search"&gt;search&lt;/a&gt; service which does 
  what it says. You can also find some wrappers to easily start building clients in 
  &lt;a href="https://github.com/evrythng/evrythng-java-wrapper"&gt;Java&lt;/a&gt; and 
  &lt;a href="https://github.com/evrythng/evrythng-ruby-wrapper"&gt;Ruby&lt;/a&gt;.
  &lt;/p&gt;


  &lt;h2&gt;Conclusions&lt;/h2&gt;

  &lt;p&gt;
  When you get to read the website you get a nice feeling. Everything is placed in the right 
  place, the design is very nice and the main concepts are easy to grasp.
  &lt;/p&gt;

  &lt;p&gt;
  Overall EVRYTHNG is a simple product if compared with solutions like 
  &lt;a href="http://lelylan.com/blog/cosm/"&gt;COSM&lt;/a&gt;, but its simplicity is 
  also its strength. We really enjoyed walking through the whole documentation 
  and we had the feeling we could have started to use them right now. We loved this.
  &lt;/p&gt;

  &lt;p&gt;
  In the other side, the APIs don't let you do that much and this limits the developer 
  ability to build new services. Concepts like oauth2 or physical devices provisioning
  are not faced and in our opinion are too important to be left apart. Once they will be
  integrated (or publicly released) they will be ready for the real Internet of Things market.
  &lt;/p&gt;

&lt;/div&gt;</content>
  </entry>
  <entry>
    <id>tag:lelylan.com,2012-07-24:/blog/cosm/</id>
    <title type="html">Cosm (aka Pachube)</title>
    <published>2012-07-23T22:00:00Z</published>
    <updated>2012-07-23T22:00:00Z</updated>
    <link rel="alternate" href="http://lelylan.com/blog/cosm/"/>
    <content type="html">&lt;div class="article"&gt;

  &lt;br/&gt;

  &lt;ul class="media-grid"&gt;
    &lt;li&gt;
    &lt;a href="http://cosm.com"&gt;&lt;img class="thumbnail" src="/images/blog/cosm/header.png" alt="Cosm"&gt;&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;
  COSM is a platform which enables you to store, share and discover real-time sensor, 
  energy and environment data from devices and sensors. Cosm provides most of its 
  functionality through its API, rather than through its web site, giving to developers
  a full set of services that we will be describing in this article.
  &lt;/p&gt;

  &lt;h2&gt;Once upon a time there was Pachube&lt;/h2&gt;

  &lt;p&gt;
  When it started, around 4 years ago, its name was Pachube. It was ideally suited 
  for visualizing data from sensors connected to the physical world. The main concepts 
  on which Pachube came to life was two: feeds and datastreams.
  &lt;/p&gt;

  &lt;ul class="unstyled"&gt;
    &lt;li&gt;&lt;code&gt;Feeds&lt;/code&gt; Usually a location (e.g. office and house).&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;Datastreams&lt;/code&gt; The physical device associated to the location
    (e.g. sensors and power meters).&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;
  A few months ago, it had a facelift and it changed its name to Cosm. Cosm is everything 
  you know and love about Pachube, with more power to connect and build the Internet of 
  Things today. The data about Cosm is quite impressive. It manages millions of datapoints 
  per day from thousands of individuals, organisations and companies around the world. Data 
  can be pushed from the sensor end, or pulled by the Cosm servers, with the data feeds 
  then made available in multiple formats at no charge.
  &lt;/p&gt;

  &lt;p&gt;
  In its new vest Cosm tries to be a social network for the Internet of Things, but as
  reported by &lt;a href="http://www.readwriteweb.com/archives/cosm-disappointing-re-design-by-internet-of-things-pioneer-pachube.php"&gt;Read Write Web&lt;/a&gt;,
  at least two problems raised. The first one is that Cosm tries to be now mainstream, it
  tries to be "for everybody", but it is not ready for this step. Its UI is not enough
  intuitive. Second, when you go into the console you can't do that much, at least if 
  you do not have an Arduino. After a while you just leave it. This is an extract I really 
  like of the RWW article.
  &lt;/p&gt;

  &lt;blockquote&gt;
    &lt;p&gt;
    I'm being a little hard on Cosm, because I was expecting something more user friendly. However, 
    I still buy into the vision for Cosm. In a close future, we will indeed manage various 
    feeds from household and other devices...
    &lt;/p&gt;
  &lt;/blockquote&gt;

  &lt;p&gt;
  After studying their APIs we think Cosm is a great product. It has almost all
  the services needed to build the Internet of Things and when hardware producers will
  realize that, it will start making big numbers. Enough with the introduction, it's API time.
  &lt;/p&gt;

  &lt;h2&gt;Cosm APIs&lt;/h2&gt;

  &lt;p&gt;
  The &lt;a href="https://cosm.com/docs/quickstart"&gt;API documentation&lt;/a&gt; is complete. There is 
  quickstart which lets you create your first feed following a step by step wizard. Although it
  is clear and well prepared, we didn't like the idea of importing the Twitter feed in Cosm as
  first example as it's not a use case for the Internet of Things. This said lets dig into the 
  services.
  &lt;/p&gt;

  &lt;h3&gt;&lt;a href="https://cosm.com/docs/v2/feed/"&gt;FEEDS&lt;/a&gt;&lt;/h3&gt;

  &lt;p&gt;
  It represents a group of datastreams. It is used to represent some locations like your 
  house or your office. It's interesting the ability to tag the feeds to make them easily 
  searchable and also the ability to set latitude and longitude to enable geospatial queries.
  &lt;p&gt;

  &lt;h3&gt;&lt;a href="https://cosm.com/docs/v2/datastream/"&gt;DATASTREAMS&lt;/a&gt;&lt;/h3&gt;

  &lt;p&gt;
  A datastream represents an individual sensor/device stream within an environment like
  powermeters, lights or geiger counters. In here the values related to the physical 
  device properties are stored.
  &lt;/p&gt;

  &lt;h3&gt;&lt;a href="https://cosm.com/docs/v2/datapoint/"&gt;DATAPOINTS&lt;/a&gt;&lt;/h3&gt;

  &lt;p&gt;
  A datapoint represents the value in a specific moment of the datastream life. This 
  enables you to insert datapoints into the history of the datastream.
  &lt;/p&gt;

  &lt;h3&gt;&lt;a href="https://cosm.com/docs/v2/api_key/"&gt;API KEYS&lt;/a&gt;&lt;/h3&gt;

  &lt;p&gt;
  Cosm lets you create API keys with granular permissions. Keys are composed of different 
  sets of permissions, so for example we could create a key that allows read-only access to
  all public resources or allows write-access to one specific feed, from one specific IP 
  address. Those are the most important properties in the key resource.
  &lt;/p&gt;

  &lt;ul class="unstyled"&gt;
    &lt;li&gt;&lt;code&gt;expires_at&lt;/code&gt; Gives a temporary limit.&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;private_access&lt;/code&gt; Flag if this key can access private resources.&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;permissions&lt;/code&gt; List of access level.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;
  The permission structure is another resource and those are the most interesting 
  properties you should be aware of.
  &lt;/p&gt;

  &lt;ul class="unstyled"&gt;
    &lt;li&gt;&lt;code&gt;access_method&lt;/code&gt; An array containing one or more of [get, put, post, delete].&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;source_ip&lt;/code&gt; An IP address that access should be restricted to,
    &lt;li&gt;&lt;code&gt;minimum_interval&lt;/code&gt; Can be used to create a key that can only request data 
    with a certain resolution.&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;resources&lt;/code&gt; An optional collection of resources restricting access 
    to specific feeds or datastreams.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3&gt;&lt;a href="https://cosm.com/docs/v2/trigger/"&gt;TRIGGERS&lt;/a&gt;&lt;/h3&gt;

  &lt;p&gt;
  Triggers fire HTTP POST requests to a URL of your choice when conditions that you 
  set up on a datastream have been satisfied (e.g. value change, value exceeds threshold, 
  value equals, etc.).
  &lt;/p&gt;

  &lt;p&gt;
  This service can be useful in different scenarios. For example to turn off the cooling 
  system when a window is open or when the water for your flowers is finished. In this way,
  using a webhook mechanism you can connect Cosm feeds and datastreams with any other app.
  &lt;/p&gt;

  &lt;h3&gt;&lt;a href="https://cosm.com/docs/v2/user/"&gt;USERS&lt;/a&gt;&lt;/h3&gt;

  &lt;p&gt;
  User are ideally a powerful concept, as there are some situations where you have
  to create new people, so that you can let them access your resources for a limited 
  period of time. Unluckily the resource is not open and you have to make a request to 
  Cosm if you want to use it.
  &lt;/p&gt;

  &lt;h3&gt;&lt;a href="https://cosm.com/docs/v2/history.html"&gt;HISTORICAL QUERY&lt;/a&gt;&lt;/h3&gt;

  &lt;p&gt;
  Gives the ability to make queries for ranges of historical data at datastream level
  as well as at the environment level, using formatted dates. The API lets you set the
  param &lt;code&gt;interval&lt;/code&gt;, which can be pretty useful to reduce the amount of retrieved
  data letting you get back the historical resources with intervals of 30 seconds, one minute,
  5 minutes and so on.
  &lt;/p&gt;


  &lt;h2&gt;Beta features&lt;/h2&gt;

  &lt;p&gt;
  Cosm is delivering also different &lt;a href="https://cosm.com/docs/beta/"&gt;beta&lt;/a&gt; features, 
  which are just delicious.
  &lt;/p&gt;

  &lt;h3&gt;&lt;a href="https://cosm.com/docs/beta/group/"&gt;GROUPS&lt;/a&gt;&lt;/h3&gt;

  &lt;p&gt;
  Groups can be used for two main reasons: organize both users and feeds, and create 
  more advanced access rules for private feeds. If used in the right way, they can make your 
  system much more flexible and open to other users.
  &lt;/p&gt;

  &lt;h3&gt;&lt;a href="https://cosm.com/docs/beta/permission/"&gt;PERMISSIONS&lt;/a&gt;&lt;/h3&gt;

  &lt;p&gt;
  The permissions API allows you to get information about what an API Key is allowed to 
  do.
  &lt;p&gt;

  &lt;h3&gt;&lt;a href="https://cosm.com/docs/beta/socket_server/"&gt;SOCKET SERVER&lt;/a&gt;&lt;/h3&gt;

  &lt;p&gt;
  Paws is the Cosm Advanced Web-scale Socket-server. It is designed to make writing 
  clients which require real-time push notifications as easy as possible.
  &lt;/p&gt;

  &lt;h3&gt;&lt;a href="https://cosm.com/docs/beta/mqtt/"&gt;MQTT&lt;/a&gt;&lt;/h3&gt;

  &lt;p&gt;
  The Cosm MQTT Bridge is a simple way to interact with Cosm directly from any MQTT
  enabled platform. It provides full API interaction, as well as push notifications
  and subscriptions.
  &lt;/p&gt;

  &lt;h3&gt;&lt;a href="https://cosm.com/docs/beta/oauth/"&gt;OAUTH2&lt;/a&gt;&lt;/h3&gt;

  &lt;p&gt;
  OAuth2 is a method for allowing third-party application access to your resources 
  without giving them access to your username and password. It is used by most major 
  websites including Facebook and Twitter and its biggest strength lies in its ability 
  to let the user have full control of its resources.
  &lt;/p&gt;

  &lt;h2&gt;Provisioning beta. A delicious service&lt;/h2&gt;

  &lt;p&gt;
  The &lt;a href="https://cosm.com/docs/beta/device_management/provisioning/"&gt;provisioning&lt;/a&gt; 
  service is just awesome. Provisioning is the process of a device getting its configuration 
  in order to be able to send data to Cosm. This service simplify our lives when thinking 
  at the physical world allowing the owner of the device to 'claim' it. For example once 
  your device is plugged in and online, you might go to its website, enter your serial 
  number and claim it there, and this would all be done using the provisioning APIs.
  &lt;/p&gt;

  &lt;p&gt;
  When the physical device is plugged in this is what happens.
  &lt;/p&gt;

  &lt;ol&gt;
    &lt;li&gt;It sends an activation code to the provisioning API.&lt;/li&gt;
    &lt;li&gt;The API creates a feed (which can be preconfigured).&lt;/li&gt;
    &lt;li&gt;The API creates an API key that is sent to the device. This key will be used by 
    the physical device to authenticate itself when sending updates.&lt;/li&gt;
  &lt;/ol&gt;

  &lt;p&gt;
  Without getting into the details Cosm let you define two resources. The first one is the 
  &lt;a href="https://cosm.com/docs/beta/device_management/api/device_model/"&gt;Device Model&lt;/a&gt; 
  and it represents a class of devices, like the "Boxee" and the second is 
  &lt;a href="https://cosm.com/docs/beta/device_management/api/device/"&gt;Device&lt;/a&gt;, 
  which represents an individual device with its own serial number.
  &lt;/p&gt;

  &lt;p&gt;
  Without going further, go and read the &lt;a href="https://cosm.com/docs/beta/device_management/provisioning/"&gt;documentation&lt;/a&gt;.
  It will be worth it.
  &lt;/p&gt;

  &lt;h2&gt;Conclusions&lt;/h2&gt;

  &lt;p&gt;
  Cosm is for sure the most complete service out there. It offers all the services we need to 
  build the Internet of Things, and it does it well. At first all of those concepts are not easy
  to grasp, but give it the right time and you will get excited about what you can do. It's a 
  metter of time and its success will start to be visible to everyone.
  &lt;/p&gt;

  &lt;p&gt;
  Tell us which one is the next Internet of Things startup you want us to check. This is the 
  first article of a series that wants to get in deep about the Internet of Things ecosystem.
  &lt;/p&gt;

&lt;/div&gt;</content>
  </entry>
</feed>
